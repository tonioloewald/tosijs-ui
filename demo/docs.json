[
  {
    "text": "# xinjs-ui\n\n[ui.xinjs.net live demo](https://ui.xinjs.net) [xinjs](https://xinjs.net) [discord](https://discord.gg/ramJ9rgky5) [github](https://github.com/tonioloewald/xinjs-ui#readme) [npm](https://www.npmjs.com/package/xinjs-ui) <size-break min-width=\"500\"><img alt=\"bundlejs\" src=\"https://deno.bundlejs.com/?q=xinjs-ui&badge=\"></size-break>\n\nCopyright ©2023 Tonio Loewald\n\n## the xinjs ui library\n\nIn general, `xinjs` strives to work _with_ the browser rather than trying to _replace_ it.\n\nIn a similar vein, `xinjs-ui` comprises a collection of [web-components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)\nwith the goal of augmenting what _already_ works well, and the components are intended be interoperable as\nsimilar as possible to things that you already use, such as `<input>` or `<select>` elements.\nE.g. where appropriate, the `value` of an element is its malleable `state`, and when this changes,\nthe element emits a `change` event.\n\nSimilarly, the xinjs base `Component` class and the components in this collection stive to\nbe as similar in operation as possible to DOM elements as possible. E.g. binary attributes\nwork as expected. Adding the `hidden` attribute makes them disappear.\nIntinsic properties of components will default to `null` rather than `undefined`.\n\nSimilarly, because web-components are highly interoperable, there's no reason to reinvent\nwheels. In particular, this library won't try to replace existing, excellent libraries\nsuch as [shoelace.style](https://shoelace.style/) or wrap perfectly functional HTML\nelements, like the venerable `<input>` or `<form>` elements that are already capable\nand accessible.\n\nThe goal here is to provide useful components and other utilities that add to what's built into HTML5 and CSS3.\n\n## custom elements\n\nThe simplest way to use these elements is to simply import the element and then either\nuse HTML or the `ElementCreator` function exported.\n\nE.g. to use the markdown viewer:\n\n```\nimport { markdownViewer } from 'xinjs-ui'\n\ndocument.append(markdownViewer(`\n# hello world\nhere is some markdown\n`))\n```\n\nAssuming you import the javascript somewhere, this HTML will work as well.\n\n```\n<markdown-viewer>\n# hello world\nhere is some markdown\n</markdown-viewer>\n```\n\nThe big difference with using the `markdownViewer()` function is that the `xinjs` `Component`\nclass will automatically pick a new tag if the expected tag is taken (e.g. by a previously\ndefined custom-element from another library). `markdownViewer()` will create an element of\nthe correct type.\n\nThe other thing is that `xinjs` `ElementCreator` functions are convenient and composable,\nallowing you to build DOM elements with less code than pretty much any other option, including\nJSX, TSX, or HTML.\n",
    "filename": "README.md",
    "path": "README.md"
  },
  {
    "text": "# `<bodymovin-player>`\n\nA wrapper for AirBnb's bodymovin, a.k.a. [lottie](https://airbnb.io/lottie/#/web), player. It's designed\nto work like an `<img>` element (just set its `src` attribute).\n\n```html\n<bodymovin-player \n  style=\"height: 160px; width: 160px\" \n  src=\"https://raw.githubusercontent.com/tonioloewald/xinjs-ui/main/demo/88140-rocket-livetrade.json\"\n></bodymovin-player>\n<div>\n  Animation by <a target=\"_blank\" href=\"https://lottiefiles.com/dvskjbicfc\">chiến lê hồng</a>\n</div>\n```\n```css\n.preview {\n  padding: var(--spacing);\n  text-align: center;\n}\n```\n\nYou can also directly set its `json` property to the content of a `lottie.json` file.\n\nAnd of course just access the element's `animation` property to [use the bodymovin API](https://airbnb.io/lottie/#/web).",
    "filename": "bodymovin-player.ts",
    "path": "src/bodymovin-player.ts"
  },
  {
    "text": "# `<code-editor>`\n\nSometimes, it's nice to be able to just toss a code-editor in a web-page. It's a thin wrapper around the [ACE Editor](https://ace.c9.io/). \n\n`<code-editor>`'s `value` is the code it contains. Its `mode` attribute sets the language, and you can further configure\nthe ACE editor instance via its `options` property.\n\n```html\n<code-editor style=\"width: 100%; height: 190px\" mode=\"css\">\nbody {\n  box-sizing: border-box;\n}\n</code-editor>\n```",
    "filename": "code-editor.ts",
    "path": "src/code-editor.ts"
  },
  {
    "text": "# `<data-table>`\n\nA virtual data-table, configurable via a `columns` array (which will automatically be generated if not provided),\nthat displays gigantic tables with fixed headers (and live column-resizing) using a minimum of resources and cpu.\n\n```js\nconst { dataTable } = xinjsui\nconst { input } = xinjs.elements\n\nconst emojiRequest = await fetch('https://raw.githubusercontent.com/tonioloewald/emoji-metadata/master/emoji-metadata.json')\nconst emojiData = await emojiRequest.json()\n\nconst columns = [\n  {\n    name: \"emoji\",\n    prop: \"chars\",\n    align: \"center\",\n    width: 80\n  },\n  {\n    prop: \"name\",\n    width: 300,\n    // custom cell using xinjs bindings to make the field editable\n    dataCell() {\n      return input({\n        class: 'td',\n        bindValue: '^.name',\n        title: 'name',\n      })\n    },\n  },\n  {\n    prop: \"category\",\n    width: 150\n  },\n  {\n    prop: \"subcategory\",\n    width: 150\n  },\n]\n\npreview.append(dataTable({ array: emojiData, columns }))\n```\n```css\n.preview input.td {\n  margin: 0;\n  border-radius: 0;\n  box-shadow: none !important;\n}\n\n.preview data-table {\n  height: 100%;\n}\n```\n\nYou can set the `<data-table>`'s `array`, `columns`, and `filter` properties directly, or set its `value` to:\n\n```\n{ \n  array: any[], \n  columns: ColumnOptions[] | null, \n  filter?: ArrayFilter \n}\n```\n\nIf you set the `<data-table>`'s `rowHeight` to `0` it will render all its elements (i.e. not be virtual). This is\nuseful for smaller tables, or tables with variable row-heights.",
    "filename": "data-table.ts",
    "path": "src/data-table.ts"
  },
  {
    "text": "# `<filter-builder>`\n\nAutomatically creates `ArrayFilter` functions `(a: any[]) => any[]` based on the query you build using its\nmacOS Finder-inspired interface, using an easily customizable / extensible collection of `Filter` objects.\n\n```js\nconst { dataTable, filterBuilder, availableFilters } = xinjsui\n\nconst sourceWords = ['acorn', 'bubblegum', 'copper', 'daisy', 'ellipse', 'fabulous', 'gerund', 'hopscotch', 'idiom', 'joke']\nfunction randomWords () {\n  let numWords = Math.random() * 4\n  const words = []\n  while (numWords > 0) {\n    numWords -= 1\n    words.push(sourceWords[Math.floor(Math.random() * 10)])\n  }\n  return words\n}\n\nconst array = []\nfor(let i = 0; i < 1000; i++) {\n  array.push({\n    date: new Date(Math.random() * Date.now()).toISOString().split('T')[0],\n    isLucky: Math.random() < 0.1,\n    number: Math.floor(Math.random() * 200 - 100),\n    string: randomWords().join(' '),\n  })\n}\n\nconst columns = [\n  {\n    prop: 'date',\n    width: 120\n  },\n  {\n    prop: 'isLucky',\n    type: 'boolean',\n    width: 100\n  },\n  {\n    prop: 'number',\n    align: 'right',\n    width: 100\n  },\n  {\n    prop: 'string',\n    width: 300\n  },\n]\n\nconst table = dataTable({ array, columns })\nconst { contains, equals, after, isTrue, isFalse } = availableFilters\nconst filter = filterBuilder({\n  filters: { contains, equals, after, isTrue, isFalse },\n  fields: columns,\n  onChange(event) {\n    console.log(filter.filter, filter.description)\n    table.filter = filter.filter\n  }\n})\npreview.append(filter, table)\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n}\n\n.preview data-table {\n  flex: 1 1 auto;\n}\n```\n\n## availableFilters\n\n`<filter-builder>` has a default set of `FilterMaker` objects which it uses to construct filter function.\nIn the example above, the default collection of filters is reduced to `contains`, `equals`, `after`, and `isTrue`.\n\nThe full collection includes:\n\n- **contains** * looks for fields containing a string (ignoring case)\n- **equals** * looks for fields containing equivalent values (ignoring case)\n- **after** * looks for fields with a date after a provided value\n- **greaterThan** * looks for fields with a value greater than a provided value\n- **truthy** * looks for fields that are true / non-zero / non-empty\n- **true** looks for fields that are `true`\n- **false** looks for fields that are `false`\n\n**Note**: the filters marked with an * have negative version (e.g. does not contain).\n\n```\ntype ObjectTest (obj: any) => boolean\n\ninterface FilterMaker {\n  caption: string                                 // describes the test condition\n  negative?: string                               // describes the negative test condition\n  needsValue?: boolean                            // if false, the filterMaker doesn't need a needle value\n  filterMaker(needle: any) => ObjectTest          // builds an ObjectTest\n}\n```",
    "filename": "filter-builder.ts",
    "path": "src/filter-builder.ts"
  },
  {
    "text": "# `<live-example>`\n\n`<live-example>` makes it easy to insert interactive code examples in a web page.\nIt's effectively a super lightweight fiddle based on the `b8rjs`'s `fiddle` component\n(which I miss dearly). (You're probably looking at it right now.)\n\nYou can simply wrap it around a sequence of code blocks in the DOM with the\nlanguages (js, html, css) as annotations or you can directly set the `js`, `html`,\nand `css` properties.\n\n```css\n.preview {\n  padding: 0 var(--spacing);  \n}\n\n.example {\n  animation: throb ease-in-out 1s infinite alternate;\n}\n\n@keyframes throb {\n  from { color: blue }\n  to { color: red }\n}\n```\n```js\n// this code executes in an async function body\n// it has xinjs, xinjsui, and preview (the preview div) available as local variables\nconst { div } = xinjs.elements\npreview.append(div({class: 'example'}, 'fiddle de dee!'))\n```\n```html\n<h2>Example</h2>\n```",
    "filename": "live-example.ts",
    "path": "src/live-example.ts"
  },
  {
    "text": "# makeSorter\n\nI'm always confusing myself when writing sort functions, so I wrote `makeSorter()`. It's\ninsanely simple and just works™. It makes writing an array sort callback for anything\nother than an array of numbers or strings easier.\n\nTo create a sort callback that sorts by propA then propB (if propA is tied):\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB]\n)\n```\n\nAs above, but sort descending:\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB], \n  false\n)\n```\n\nAs above but propA is sorted ascending, propB descending\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB], \n  [true, false]\n)\n```\n\nInteractive example:\n\n```css\n.preview {\n  padding: var(--spacing);\n}\n```\n```js\nconst { select, option, div, ul, li } = xinjs.elements\nconst { makeSorter } = xinjsui\n\nconst people = [\n  { first: 'Juanita', last: 'Citizen', age: 25 },\n  { first: 'Rebecca', last: 'Howe', age: 35 },\n  { first: 'Jane', last: 'Doe', age: 35 },\n  { first: 'Sam', last: 'Malone', age: 40 },\n  { first: 'Norm', last: 'Peterson', age: 38 },\n]\n\nconst sorters = {\n  firstSort: makeSorter(person => [person.first]),\n  firstDescSort: makeSorter(person => [person.first], false),\n  nameSort: makeSorter(person => [person.last, person.first]),\n  ageFirst: makeSorter(person => [-person.age, person.last]),\n  ageLast: makeSorter(person => [person.age, person.first], [true, false]),\n}\n\nfunction person({first, last, age}) {\n  return li(`${first} ${last}, ${age}`)\n}\n\nconst list = ul()\nsortPicker = select(\n  option('Sort by first', {value: 'firstSort'}),\n  option('Sort by first (desc)', {value: 'firstDescSort'}),\n  option('Sort by last, first', {value: 'nameSort'}),\n  option('Sort by age (desc), first', {value: 'ageFirst'}),\n  option('Sort by age, last (desc)', {value: 'ageLast'}),\n  {\n    onChange: render,\n    value: 'nameSort'\n  },\n)\n\nfunction render () {\n  list.textContent = ''\n  list.append(...people.sort(sorters[sortPicker.value]).map(person))\n}\n\npreview.append(\n  sortPicker,\n  list\n)\n\nrender()\n```",
    "filename": "make-sorter.ts",
    "path": "src/make-sorter.ts"
  },
  {
    "text": "# `<map-box>`\n\nA [mapboxgl](https://docs.mapbox.com/mapbox-gl-js/api/) wrapper.\n\n```html\n<!-- please don't abuse my mapbox token -->\n<map-box \n  style=\"width: 100%; height: 190px\"\n  coords=\"21.4389,-158.0001,9\"\n  token=\"pk.eyJ1IjoicG9kcGVyc29uIiwiYSI6ImNqc2JlbWU0bjA1ZmY0YW5ycHZod3VhbWcifQ.arvqfpOqMgFYkKgQ35UScA\"\n></map-box>\n```\n\nThere's no need to learn new apis, just access the element's `map` property.",
    "filename": "mapbox.ts",
    "path": "src/mapbox.ts"
  },
  {
    "text": "# `<markdown-viewer>`\n\nRender [markdown](https://www.markdownguide.org/) anywhere, either using the `src` attribute to load\nthe file asynchronousely, or just put the text inside it. Powered by [marked](https://www.npmjs.com/package/marked).\n\n```\n<markdown-viewer src=\"/path/to/file.md\">\n```\n\nAnd you can set the `<markdown-viewer>` element's `value` directly, or:\n\n```html\n<markdown-viewer>\n## hello\nworld\n</markdown-viewer>\n```\n```css\nmarkdown-viewer {\n  display: block;\n  padding: var(--spacing);\n}\n```\n\nAnd just set the element's `value` and it will render it for you.",
    "filename": "markdown-viewer.ts",
    "path": "src/markdown-viewer.ts"
  },
  {
    "text": "# `<rich-text>`\n\nA simple and easily extensible `document.execCommand` WYSIWYG editor with some conveniences.\n\nBy default, it treats its initial contents as its document, but you can also set (and get)\nits `value`.\n\n```html\n<rich-text widgets=\"minimal\">\n<h3>Heading</h3>\n<p>And some <b>text</b></p>\n</rich-text>\n```\n\nIt has a `toolbar` slot (actually a xin-slot because it doesn't use the shadowDOM).\n\nIf you set the `widgets` attribute to `default` or `minimal` you will get a toolbar\nfor free. Or you can add your own custom widgets.\n\nA number of convenience functions available, including:\n\n- `commandButton(title: string, command: string, iconClass: string)`\n- `blockStyle(options: Array<{caption: string, tagType: string}>)`\n- `spacer(width = '10px')`\n- `elastic(width = '10px')`\n\nThese each create a toolbar widget. A `blockStyle`-generated `<select>` element will\nautomatically have its value changed based on the current selection.\n\nThe `<rich-text>` component provides `selectedText` and `selectedBlocks` properties, allowing\nyou to easily perform operations on text selections, and a `selectionChange` callback (which\nsimply passes through document `selectionchange` events, but also passes a reference to\nthe `<rich-text>` component).",
    "filename": "rich-text.ts",
    "path": "src/rich-text.ts"
  },
  {
    "text": "# `<side-nav>`\n\nThe default layout for iOS / iPadOS apps is to hide the sidebar when displaying content on small\nscreens, and display the sidebar when space is available (with the user able to explicitly hide\nthe sidebar if so desired). `<side-nav>` provides this functionality.\n\n`<side-nav>` is used to handle the layout of the documentation tab panel.",
    "filename": "side-nav.ts",
    "path": "src/side-nav.ts"
  },
  {
    "text": "# `<size-break>`\n\nWhile we wait for enough browsers to implement [container-queries](https://www.w3.org/TR/css-contain-3/),\nand in any event when you simply want to do different things at different sizes (e.g. in the project I'm\nworking on right now, a row of buttons turns into a menu at narrow widths) there's `<size-break>`.\n\nNote that the sizes referred to are of the `<size-break>`'s `.offsetParent`, and it watches for\nthe window's `resize` events and its own (via `ResizeObserver`).\n\n```html\n<div class=\"container\">\n  <size-break min-width=\"150\" min-height=\"80\">\n    <h1>BIG!</h1>\n    <i slot=\"small\">little</i>\n  </size-break>\n  <div class=\"sizer\"></div>\n</div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.preview size-break {\n  width: 100%;\n  height: 100%;\n  background: #fff8;\n  border: 1px solid #aaa;\n}\n\n.container {\n  position: relative;\n  min-width: 100px;\n  min-height: 40px;\n  max-height: 200px;\n  width: 400px;\n  height: 100px;\n}\n\n.sizer {\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  background: #0003;\n  bottom: 0;\n  right: 0;\n  cursor: nwse-resize;\n}\n```\n```js\nconst { trackDrag } = xinjsui\n\nconst container = preview.querySelector('.container')\nconst sizer = preview.querySelector('.sizer')\n\nfunction resize(event) {\n  const w = container.offsetWidth\n  const h = container.offsetHeight\n  trackDrag(event, (dx, dy, event) => {\n    container.style.width = (w + dx) + 'px'\n    container.style.height = (h + dy) + 'px'\n    return event.type === 'mouseup'\n  }, 'nwse-resize')\n}\n\nsizer.addEventListener('mousedown', resize, 'nwse-resize')\nsizer.addEventListener('touchstart', resize, 'nwse-resize')\n```\n\n`<size-break>` supports both `min-width` and/or `min-height`, and you can of course target only one\nof the slots if you like. The demo site uses them to hide the [bundlejs](https://bundlejs.com/) badge when\nspace is tight.",
    "filename": "size-break.ts",
    "path": "src/size-break.ts"
  },
  {
    "text": "# `<tab-selector>`\n\n`<tab-selector>` creates a `tabpanel` for its children, creating a `tab` for each based on its\n`name` attribute.\n\n```html\n<tab-selector>\n  <div name=\"first\">first body</div>\n  <div name=\"second\">second body</div>\n  <div name=\"third\">third body</div>\n</tab-selector>\n```\n```css\n  tab-selector {\n    height: 100%;\n  }\n  \n  div[name] {\n    padding: 20px;\n    text-align: center;\n    height: 100%;\n    font-size: 200%;\n  }\n```\n```js\n[...preview.querySelectorAll('div[name]')].forEach(div => {\n  div.style.color = `hsl(${(Math.random() * 360).toFixed(0)} 50% 50%)`\n})\n```\n\nUsage:\n\n`TabSelector` is the class and `tabSelector` is the `ElementCreator`. So the three methods\nof creating a `<tab-selector>` are:\n\n1. importing `TabSelector` and inserting the appropriate HTML: `<tab-selector>`.\n2. using `new TabSelector()` and appending it to the DOM.\n3. using `tabSelector()` and appending it to the DOM. This last is more convenient because\n   `ElementCreator` allows composition, convenient assignment of properties and attributes,\n   and so forth.",
    "filename": "tab-selector.ts",
    "path": "src/tab-selector.ts"
  },
  {
    "text": "# trackDrag\n\nSometimes you want to track a mouse-drag or touch-drag operation without messing around.\nThis is how the resizeable columns in `<data-table>` work.\n\nJust call `trackDrag(event, (dx, dy, event) => { ... })` and you'll get updates on corresponding events until\nyou return `true` from the event-handler (or, in the case of `touch` events, the last `touch` ends).\nFor mouse events, a \"tracker\" element is thrown up in front of everything for the event.\n\n```html\n<p>\n  Try dragging the squares…<br>\n  (You can drag them separately with multi-touch!)\n</p>\n<div class=\"draggable\" style=\"top: 20px; left: 40px; background: #f008\"></div>\n<div class=\"draggable\" style=\"left: 40%; bottom: 30%; background: #0f08\"></div>\n<div class=\"draggable\" style=\"bottom: 30px; right: 10px; background: #00f8\"></div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.draggable {\n  content: ' ';\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  cursor: move;\n}\n\n.preview p {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n```\n```js\nconst { trackDrag } = xinjsui\n\nfunction dragItem(event) {\n  const draggable = event.target\n  if (draggable.classList.contains('draggable')) {\n    const x = draggable.offsetLeft\n    const y = draggable.offsetTop\n    trackDrag(event, (dx, dy, event) => {\n      draggable.style.left = (x + dx) + 'px'\n      draggable.style.top = (y + dy) + 'px'\n      draggable.style.bottom = 'auto'\n      draggable.style.right = 'auto'\n      return event.type === 'mouseup'\n    })\n  }\n}\n\npreview.addEventListener('mousedown', dragItem )\npreview.addEventListener('touchstart', dragItem, { passive: true } )\n```\n\nFor `touch` events, `dx` and `dy` are based on tracking `event.changedTouches[0]` which\nis almost certainly what you want.\n\nTo handle multi-touch gestures you will need to track the touches yourself.",
    "filename": "track-drag.ts",
    "path": "src/track-drag.ts"
  },
  {
    "text": "# scriptTag & styleSheet\n\n## scriptTag\n\nIf you need to load an old school (cjs) javascript library via cdn (both mapboxgl and bodymovin are\nfine examples) then use these two functions. They return promises that resolve `globalThis` when the\nmodule in question has loaded and otherwise behave as much like aync `import()` as possible.\n\nUsing `scriptTag`:\n\n```html\n<canvas></canvas>\n```\n```css\ncanvas {\n  width: 100%;\n  height: 100%;\n}\n```\n```js\nconst { scriptTag } = xinjsui\n\n// Note that the current version of Chart.js is an ES6 module so you could just use `import()` instead\nconst { Chart } = await scriptTag('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js')\nconst data = {\n  labels: ['first', 'second', 'third'],\n  datasets: [\n    {\n      label: 'amazingness',\n      backgroundColor: '#fff4',\n      borderColor: '#f008',\n      borderWidth: 2,\n      data: [21, 27, 57]\n    }\n  ]\n}\nconst options = {\n  scales: {\n    yAxes:[{\n      stacked:true,\n      gridLines: {\n        display:true,\n        color: '#00f2'\n      }\n    }],\n    xAxes:[{\n      gridLines: {\n        display:false\n      }\n    }]\n  }\n}\n\nChart.Bar(preview.querySelector('canvas'), {data, options})\n```\n\nNote that `scriptTag` will resolve `globalThis` so it behaves as much like async `import()`\nas possible.\n\nAs an aside:\n\n`<bodymovin-player>` is implemented in such a way that if you've preloaded the module\n(e.g. via a script tag or packaging) it won't load it again, which affords offline\nuse.\n\nThere's no point for `<map-box>` since it won't work without connectivity anyway.\n\n## styleSheet\n\nstyleSheet creates a `<link>` tag for a specified css file.\n\nUsing `styleSheet`:\n\n    styleSheet('../path/to/style.css')\n\nThis is awaitable, if you care. The stylesheet `<link>` will only be inserted _once_.",
    "filename": "via-tag.ts",
    "path": "src/via-tag.ts"
  }
]

[
  {
    "text": "# test\n\nThis is a test!\n",
    "filename": "test.md",
    "path": "documentation/test.md"
  },
  {
    "text": "# xinjs-ui\n\n[xinjs](https://xinjs.net) | [github](https://github.com/tonioloewald/xinjs-ui#readme) | [npm](https://www.npmjs.com/package/xinjs-ui) | ![bundlejs](https://deno.bundlejs.com/?q=xinjs-ui&badge=)\n\nCopyright ©2023 Tonio Loewald\n\n## the xinjs component library\n\nIn general, `xinjs` strives to work _with_ the browser rather than trying to replace it.\n\nThis is _not_ a library of wrappers for things that work perfectly well in HTML!\n\nSimilarly, because web-components are highly interoperable, there's no reason to reinvent\nwheels. In particular, this library won't try to replace existing, excellent libraries\nsuch as [shoelace.style](https://shoelace.style/).\n\nThe goal here is to provide useful components that augment what's built into HTML5.\n\n### `<tab-selector>`\n\nA tab-selector with nice animations.\n\n### `<map-box>`\n\nA mapboxgl wrapper.\n\n### `<bodymovin-player>`\n\nA bodymovin, a.k.a. lottie, player.\n\n### `<data-table>`\n\nA virtual data-table, configurable via a `columns` array (which will automatically be generated if not provided),\nthat displays gigantic tables with fixed headers (and live column-resizing) using a minimum of resources and cpu.\n\n### `<markdown-viewer>`\n\nRender markdown anywhere, either using the `src` attribute to load the file asynchronousely, or\njust put the text inside it:\n\n    <markdown-viewer src=\"/path/to/file.md\">\n\nOr (but don't include the indentation!!):\n\n    <markdown-viewer>\n      # hello\n      world\n    </markdown-viewer>\n\n### `<filter-builder>`\n\nAutomatically creates `ArrayFilter` functions `(a: any[]) => any[]` based on a text query that accepts the\nfollowing space-delimited criteria — all text matches are performed in `LocaleLowerCase`\n\nThe filter-builder has a default set of `FilterMaker` objects which it uses to **curry** an filter function.\n\n    type ObjectTest (obj: any) => boolean\n\n    interface FilterMaker {\n      hint: string                                    // describes the grammar\n      description: (...matches: string[]) => string   // describes the actual filter\n      token: RegExp                                   // matches the token\n      filterMaker(...matches: string) => ObjectTest  // builds an ObjectTest\n    }\n\nThe `<filter-builder>` will use the `hint` values to write its `placeholder` (you can override this if\nyou explicitly set the `placeholder`) and it will use the `description` function to create the\n`title` attribute, describing the filter.\n\nThe default `filters` provided are (in priority order):\n\n- `[field]=value` if `field` is specified, matches `value`, otherwise looks for `value` anwhere\n- `field!=value` matches if `field` is not `value`\n- `field>value` / `field<value` - matches if `field` is `>`/`<` `value`, if `isNaN(Number(value))` this will\n  be an alphabetical order comparison, otherwise it will be numberic.\n- `field:value` matches if `field` contains `value`\n- `!!field` matches if `field` is **truthy**\n- `!field` matches if `field` is **falsy** (e.g. `''`, `null`, `undefined`, `false`, `0`)\n- `value` matches if any field contains `value`\n\nRight now multiple criteria are `AND`ed together. This will be extended to allow `()`, `OR`, `<` and `>` comparisons will\nbecome smarter (convert both sides to numbers if possible), and extensibility will be added.\n\n### `<code-editor>`\n\nSometimes, it's nice to be able to just toss a code-editor in a web-page.\n\n## utilities\n\n### scriptTag & styleSheet\n\nIf you need to load an old schoole javascript library via cdn (both mapboxgl and bodymovin are\nfine examples) then use these two functions. They return promises that resolve when the\nmodule in question has loaded.\n\nUsage:\n\n    import { scriptTag } from 'xinjs-ui'\n\n    const bodymovinAvailable = scriptTag('../lottie.min.js')\n\n    bodymovinAvailable.then(() => {\n      globalThis.bodymovien.loadAnimation(...)\n    })\n\n`<bodymovin-player>` is implemented in such a way that if you've preloaded the module\n(e.g. via a script tag or packaging) it won't load it again, which affords offline\nuse.\n\nThere's no point for mapbox since it won't work without connectivity anyway.\n",
    "filename": "README.md",
    "path": "README.md"
  }
]

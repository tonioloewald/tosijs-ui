[
  {
    "text": "# xinjs-ui\n\n[ui.xinjs.net live demo](https://ui.xinjs.net) [xinjs](https://xinjs.net) [discord](https://discord.gg/ramJ9rgky5) [github](https://github.com/tonioloewald/xinjs-ui#readme) [npm](https://www.npmjs.com/package/xinjs-ui) <xin-sizebreak min-width=\"500\"><img alt=\"bundlejs\" src=\"https://deno.bundlejs.com/?q=xinjs-ui&badge=\"></xin-sizebreak>\n\nCopyright ©2023 Tonio Loewald\n\n## the xinjs ui library\n\nIn general, `xinjs` strives to work _with_ the browser rather than trying to _replace_ it.\n\nIn a similar vein, `xinjs-ui` comprises a collection of [web-components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)\nwith the goal of augmenting what _already_ works well, and the components are intended be interoperable as\nsimilar as possible to things that you already use, such as `<input>` or `<select>` elements.\nE.g. where appropriate, the `value` of an element is its malleable `state`, and when this changes,\nthe element emits a `change` event.\n\nSimilarly, the xinjs base `Component` class and the components in this collection stive to\nbe as similar in operation as possible to DOM elements as possible. E.g. binary attributes\nwork as expected. Adding the `hidden` attribute makes them disappear.\nIntinsic properties of components will default to `null` rather than `undefined`.\n\nSimilarly, because web-components are highly interoperable, there's no reason to reinvent\nwheels. In particular, this library won't try to replace existing, excellent libraries\nsuch as [shoelace.style](https://shoelace.style/) or wrap perfectly functional HTML\nelements, like the venerable `<input>` or `<form>` elements that are already capable\nand accessible.\n\nThe goal here is to provide useful components and other utilities that add to what's built into HTML5 and CSS3.\n\n## custom elements\n\nThe simplest way to use these elements is to simply import the element and then either\nuse HTML or the `ElementCreator` function exported.\n\nE.g. to use the markdown viewer:\n\n```\nimport { markdownViewer } from 'xinjs-ui'\ndocument.body.append(markdownViewer('# hello world\\nthis is a test'))\n```\n\n```js\nconst { markdownViewer } = xinjsui\n\npreview.append(\n  markdownViewer(`\n## hello world\nhere is some markdown\n`)\n)\n```\n\nAssuming you import the module somewhere, the HTML will work as well.\n\n```\n<xin-md>\n## hello world\nhere is some markdown\n</xin-md>\n```\n\nThe big difference with using the `markdownViewer()` function is that the `xinjs` `Component`\nclass will automatically pick a new tag if the expected tag is taken (e.g. by a previously\ndefined custom-element from another library). `markdownViewer()` will create an element of\nthe correct type.\n\nThe other thing is that `xinjs` `ElementCreator` functions are convenient and composable,\nallowing you to build DOM elements with less code than pretty much any other option, including\nJSX, TSX, or HTML.\n",
    "title": "xinjs-ui",
    "filename": "README.md",
    "path": "README.md"
  },
  {
    "text": "# ab-test\n\n`<xin-ab>` provides a simple method for implementing A|B-testing.\n\n```js\nconst { AbTest } = xinjsui\n\nAbTest.conditions = {\n  testA: true,\n  testB: false,\n  testC: Math.random() < 0.5\n}\n```\n```html\n<xin-ab condition=\"testA\">\n  <p>Visible if conditions.testA !== false</p>\n</xin-ab>\n<xin-ab condition=\"testB\">\n  <p>Visible if conditions.testB !== false</p>\n</xin-ab>\n<xin-ab not condition=\"testB\">\n  <p>Visible if conditions.testB === false</p>\n</xin-ab>\n<xin-ab condition=\"testC\">\n  <p>Visible if conditions.testC !== false (50/50 chance)</p>\n</xin-ab>\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: flex-start;\n}\n.preview p {\n  background: #44c;\n  color: white;\n  display: block;\n  border-radius: 99px;\n  padding: 4px 10px;\n  margin: 0;\n}\n```\n\n1. Set `AbTest.conditions` to anything you like.\n2. Use `<xin-ab>` elements to display conditional content.\n\nIf the value referenced by `condition` is `false` then the content\nof `<xin-ab>` will be hidden (this is reversed if `not` is set).",
    "title": "ab-test",
    "filename": "ab-test.ts",
    "path": "src/ab-test.ts"
  },
  {
    "text": "# 3d\n\nA [babylonjs](https://www.babylonjs.com/) wrapper.\n\nA `<xin-3d>` element is initialized with an `engine`, `canvas`, `scene`, and an update-loop.\n\n\n\n```js\nconst { b3d } = xinjsui\n\npreview.append(b3d({\n  sceneCreated(element, BABYLON) {\n    const camera = new BABYLON.ArcRotateCamera(\n      'camera',\n      -Math.PI / 2,\n      Math.PI / 2.5,\n      3,\n      new BABYLON.Vector3(0, 0, 0)\n    )\n    camera.attachControl(element.parts.canvas, true)\n\n    new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0.25, 1, 0.75))\n    BABYLON.MeshBuilder.CreateBox('box', {})\n  },\n  update(element) {\n    element.scene.getMeshByName('box').rotation.y += 0.005\n  }\n}))\n```\n```css\n.preview xin-3d {\n  width: 100%;\n  height: 100%;\n}\n```\n\nYou can access the `scene` and `engine` properties. You can also assign `sceneCreated`\nand `update` callbacks that will be executed when the scene is first initialized and\nbefore each update, respectively. (See the example, it does both.)\n\nBoth `sceneCreated` and `update` may be `async`. The component will `await` `sceneCreated`\nbefore starting the renderLoop, but `update` is simply passed to babylon, so be careful.\n\nBy default, this component loads `babylon.js` from the [babylonjs CDN](https://doc.babylonjs.com/setup/frameworkPackages/CDN),\nbut if `BABYLON` is already defined (e.g. if you've bundled it) then it will use that instead.\n\nIf you need additional libraries, e.g. `https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js` for loading models\nsuch as `gltf` and `glb` files, you should load those in `sceneCreated`.",
    "title": "3d",
    "filename": "babylon-3d.ts",
    "path": "src/babylon-3d.ts"
  },
  {
    "text": "# lottie\n\nA [lottie](https://airbnb.io/lottie/#/web) (a.k.a. **bodymovin**) player.\n\nIt's designed to work like an `<img>` element (just set its `src` attribute).\n\n```js\nconst { xinProxy } = xinjs\nconst { icons, popFloat } = xinjsui\nconst { h4, label, input, select, option, span } = xinjs.elements\n\nconst rocket = preview.querySelector('xin-lottie')\nsetTimeout(\n  () => {\n preview.append(\n   popFloat({\n     content: [\n       { class: 'panel', drag: true },\n       h4('Player Controls'),\n       label(\n         { class: 'no-drag' },\n         'speed',\n         input({ type: 'range', min: -1, max: 1, step: 0.1, value: 0, onInput(event) {\n           const speed = Math.pow(5, Number(event.target.value))\n           rocket.animation.setSpeed(speed)\n           event.target.nextSibling.textContent = (speed * 100).toFixed(0) + '%'\n         } }),\n         span('100%', {style: { textAlign: 'right', width: '40px'}})\n       ),\n       label(\n         { class: 'no-drag' },\n         'direction',\n         select(\n           option('Forwards', {value: 1, selected: true}),\n           option('Backwards', {value: -1}),\n           {\n             onChange(event) {\n               rocket.animation.setDirection(event.target.value)\n             }\n           }\n         ),\n         icons.chevronDown(),\n       )\n     ],\n     target: rocket,\n     position: 'w'\n   })\n )\n  },\n  500\n)\n```\n```html\n<xin-lottie\n  style=\"height: 100%; max-width: 100%\"\n  src=\"https://raw.githubusercontent.com/tonioloewald/xinjs-ui/main/demo/88140-rocket-livetrade.json\"\n></xin-lottie>\n<div class=\"caption\">\n  Animation by <a target=\"_blank\" href=\"https://lottiefiles.com/dvskjbicfc\">chiến lê hồng</a>\n</div>\n```\n```css\n.preview {\n  padding: var(--spacing);\n  text-align: center;\n}\n\n.preview .panel {\n  padding: 10px;\n  border-radius: 5px;\n  gap: 5px;\n  background: white;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.25);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.preview .caption {\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n}\n\n.preview h4 {\n  margin: 0;\n  text-align: center;\n  background: var(--brand-color);\n  color: white;\n  padding: 5px;\n  margin: -10px -10px 0 -10px;\n}\n```\n\nYou can also directly set its `json` property to the content of a `lottie.json` file.\n\nAnd of course just access the element's `animation` property to [use the bodymovin API](https://airbnb.io/lottie/#/web).\n\nAlso see the [documentation for advanced interactions](https://lottiefiles.github.io/lottie-docs/advanced_interactions/)",
    "title": "lottie",
    "filename": "bodymovin-player.ts",
    "path": "src/bodymovin-player.ts"
  },
  {
    "text": "# code\n\nAn [ACE Editor](https://ace.c9.io/) wrapper.\n\nSometimes, it's nice to be able to just toss a code-editor in a web-page.\n\n`<xin-code>`'s `value` is the code it contains. Its `mode` attribute sets the language, and you can further configure\nthe ACE editor instance via its `options` property.\n\n```html\n<xin-code style=\"width: 100%; height: 100%\" mode=\"css\">\nbody {\n  box-sizing: border-box;\n}\n</xin-code>\n```",
    "title": "code",
    "filename": "code-editor.ts",
    "path": "src/code-editor.ts"
  },
  {
    "text": "# table\n\nA virtual data-table, configurable via a `columns` array (which will automatically be generated if not provided),\nthat displays gigantic tables with fixed headers (and live column-resizing) using a minimum of resources and cpu.\n\n```js\nconst { dataTable } = xinjsui\nconst { input } = xinjs.elements\n\nconst emojiRequest = await fetch('https://raw.githubusercontent.com/tonioloewald/emoji-metadata/master/emoji-metadata.json')\nconst emojiData = await emojiRequest.json()\n\nconst columns = [\n  {\n    name: \"emoji\",\n    prop: \"chars\",\n    align: \"center\",\n    width: 80\n  },\n  {\n    prop: \"name\",\n    width: 300,\n    // custom cell using xinjs bindings to make the field editable\n    dataCell() {\n      return input({\n        class: 'td',\n        bindValue: '^.name',\n        title: 'name',\n      })\n    },\n  },\n  {\n    prop: \"category\",\n    width: 150\n  },\n  {\n    prop: \"subcategory\",\n    width: 150\n  },\n]\n\npreview.append(dataTable({ array: emojiData, columns }))\n```\n```css\n.preview input.td {\n  margin: 0;\n  border-radius: 0;\n  box-shadow: none !important;\n  background: transparent;\n}\n\n.preview xin-table {\n  height: 100%;\n}\n```\n\nYou can set the `<xin-table>`'s `array`, `columns`, and `filter` properties directly, or set its `value` to:\n\n```\n{\n  array: any[],\n  columns: ColumnOptions[] | null,\n  filter?: ArrayFilter\n}\n```\n\nIf you set the `<xin-table>`'s `rowHeight` to `0` it will render all its elements (i.e. not be virtual). This is\nuseful for smaller tables, or tables with variable row-heights.",
    "title": "table",
    "filename": "data-table.ts",
    "path": "src/data-table.ts"
  },
  {
    "text": "# filter\n\nAutomatically creates `ArrayFilter` functions `(a: any[]) => any[]` based on the query you build using its\nmacOS Finder-inspired interface, using an easily customizable / extensible collection of `Filter` objects.\n\n```js\nconst { dataTable, filterBuilder, availableFilters } = xinjsui\n\nconst sourceWords = ['acorn', 'bubblegum', 'copper', 'daisy', 'ellipse', 'fabulous', 'gerund', 'hopscotch', 'idiom', 'joke']\nfunction randomWords () {\n  let numWords = Math.random() * 4\n  const words = []\n  while (numWords > 0) {\n    numWords -= 1\n    words.push(sourceWords[Math.floor(Math.random() * 10)])\n  }\n  return words\n}\n\nconst array = []\nfor(let i = 0; i < 1000; i++) {\n  array.push({\n    date: new Date(Math.random() * Date.now()).toISOString().split('T')[0],\n    isLucky: Math.random() < 0.1,\n    number: Math.floor(Math.random() * 200 - 100),\n    string: randomWords().join(' '),\n  })\n}\n\nconst columns = [\n  {\n    prop: 'date',\n    width: 120\n  },\n  {\n    prop: 'isLucky',\n    type: 'boolean',\n    width: 100\n  },\n  {\n    prop: 'number',\n    align: 'right',\n    width: 100\n  },\n  {\n    prop: 'string',\n    width: 300\n  },\n]\n\nconst table = dataTable({ array, columns })\nconst { contains, equals, after, isTrue, isFalse } = availableFilters\nconst filter = filterBuilder({\n  filters: { contains, equals, after, isTrue, isFalse },\n  fields: columns,\n  onChange(event) {\n    table.filter = filter.filter\n  }\n})\npreview.append(filter, table)\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n}\n\n.preview xin-table {\n  flex: 1 1 auto;\n}\n```\n\n## availableFilters\n\n`<xin-filter>` has a default set of `FilterMaker` objects which it uses to construct filter function.\nIn the example above, the default collection of filters is reduced to `contains`, `equals`, `after`, and `isTrue`.\n\nThe full collection includes:\n\n- **contains** * looks for fields containing a string (ignoring case)\n- **equals** * looks for fields containing equivalent values (ignoring case)\n- **after** * looks for fields with a date after a provided value\n- **greaterThan** * looks for fields with a value greater than a provided value\n- **truthy** * looks for fields that are true / non-zero / non-empty\n- **true** looks for fields that are `true`\n- **false** looks for fields that are `false`\n\n**Note**: the filters marked with an * have negative version (e.g. does not contain).\n\n```\ntype ObjectTest (obj: any) => boolean\n\ninterface FilterMaker {\n  caption: string                                 // describes the test condition\n  negative?: string                               // describes the negative test condition\n  needsValue?: boolean                            // if false, the filterMaker doesn't need a needle value\n  filterMaker(needle: any) => ObjectTest          // builds an ObjectTest\n}\n```",
    "title": "filter",
    "filename": "filter-builder.ts",
    "path": "src/filter-builder.ts"
  },
  {
    "text": "# float\n\nA floating, potentially draggable user interface element.\n\n```html\n<xin-float class=\"float\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n\n<xin-float class=\"float\" style=\"top: 50px; right: 20px;\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n\n<xin-float class=\"float\" style=\"bottom: 20px; left: 50px;\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n```\n```css\n.preview .float {\n  width: 220px;\n  height: 180px;\n  padding: 0;\n  gap: 5px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  background: #fff8;\n  box-shadow: 2px 10px 20px #0004;\n  overflow: hidden;\n  cursor: move;\n}\n\n.preview h4 {\n  margin: 0;\n  padding: 5px 10px;\n  color: white;\n  background: red;\n}\n\n.preview .balloon {\n  cursor: default;\n  flex: 1 1 auto;\n  font-size: 99px;\n  line-height: 120px;\n  text-align: center;\n  height: auto;\n  overflow: hidden;\n}\n\n.preview footer {\n  text-align: center;\n  background: #f008;\n  color: white;\n```\n\nNote that the `<xin-float>` element has absolutely minimal styling. It's up to you to provide a drop\nshadow and background and so on.\n\nTo make a `<xin-float>` element draggable, simply set its `drag` attribute.\n\nTo prevent dragging for an interior element (e.g. if you want a floating palette with buttons or input fields)\njust add the `no-drag` class to an element or its container.",
    "title": "float",
    "filename": "float.ts",
    "path": "src/float.ts"
  },
  {
    "text": "# forms\n\n`<xin-form>` and `<xin-field>` can be used to quickly create forms complete with\n[client-side validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#built-in_form_validation_examples).\n\n```js\nconst xinForm = preview.querySelector('xin-form')\npreview.querySelector('.submit').addEventListener('click', () => {\n  xinForm.submit()\n})\n```\n```html\n<xin-form>\n  <h3 slot=\"header\">Example Form Header</h3>\n  <xin-field caption=\"Required field\" key=\"required\"></xin-field>\n  <xin-field optional key=\"optional\"><i>Optional</i> Field</xin-field>\n  <xin-field caption=\"Zip Code\" placeholder=\"12345 or 12345-6789\" key=\"zipcode\" pattern=\"\\d{5}(-\\d{4})?\"></xin-field>\n  <xin-field caption=\"Date\" key=\"date\" type=\"date\"></xin-field>\n  <xin-field caption=\"Number\" key=\"number\" type=\"number\"></xin-field>\n  <xin-field caption=\"Range\" key=\"range\" type=\"range\"></xin-field>\n  <xin-field key=\"boolean\" type=\"checkbox\">😃 <b>Agreed?!</b></xin-field>\n  <button slot=\"footer\" class=\"submit\">Submit</button>\n</xin-form>\n```\n```css\n.preview xin-form {\n  height: 100%;\n}\n\n.preview ::part(header), .preview ::part(footer) {\n  background: #ddd;\n  justify-content: center;\n  padding: calc(var(--spacing) * 0.5) var(--spacing);\n}\n\n.preview h3, .preview h4 {\n  margin: 0;\n  padding: 0;\n}\n\n.preview ::part(content) {\n  padding: var(--spacing);\n  gap: var(--spacing);\n  background: #e8e8e8;\n}\n\n.preview label {\n  display: flex;\n  gap: var(--spacing);\n}\n\n.preview label [part=\"caption\"] {\n  flex: 0 0 150px;\n  text-align: right;\n}\n\n.preview input:invalid {\n  box-shadow: inset 0 0 2px red;\n}\n\n.preview label:has(input:invalid:required)::after {\n  content: '* required'\n}\n```\n\n## `<xin-form>`\n\n`<xin-form>` prevents the default form behavior when a `submit` event is triggered and instead validates the\nform contents (generating feedback if desired) and calls its `onSubmit(value: {[key: string]: any}, isValid: boolean): void`\nmethod.\n\n`<xin-form>` instances have `value` and `isValid` properties you can access any time. Note that `isValid` is computed\nand triggers form validation.\n\n`<xin-form>` has `header` and `footer` `<slot>`s in addition to default `<slot>`, which is tucked inside a `<form>` element.\n\n## `<xin-field>`\n\n`<xin-field>` is a simple web-component with no shadowDOM that combines an `<input>` field wrapped with a `<label>`. Any\ncontent of the custom-element will become the `caption` or you can simply set the `caption` attribute.\n\n`<xin-field>` supports the following attributes:\n\n- `caption` labels the field\n- `key` determines the form property the field will populate\n- `type` determines the data-type: '' | 'checkbox' | 'number' | 'range' | 'date'\n- `optional` turns off the `required` attribute (fields are required by default)\n- `pattern` is an (optional) regex pattern\n- `placeholder` is an (optional) placeholder",
    "title": "forms",
    "filename": "form.ts",
    "path": "src/form.ts"
  },
  {
    "text": "# icons\n\nA library that provides `ElementCreator` functions that produce SVG icons. It leverages `xinjs`'s\n`svgElements` proxy.\n\n## icons\n\n`icons` is simply a proxy that generates an `ElementCreator` for a given icon on demand,\ne.g. `icons.chevronDown()` produces an `<svg>` element containing a downward-pointing chevron\nicon with the class `icon-chevron-down`.\n\n```js\nconst { icons, svgIcon } = xinjsui\nconst { div } = xinjs.elements\n\npreview.append(...Object.keys(icons).sort().map(iconName => div(\n  { class: 'tile' },\n  svgIcon({icon: iconName}),\n  div(iconName)\n)))\n```\n```css\n.preview {\n  display: flex;\n  flex-wrap: wrap;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  overflow: hidden scroll !important;\n}\n\n.preview svg {\n  fill: var(--text-color);\n}\n\n.preview .tile {\n  display: inline-block;\n  width: 160px;\n  text-align: center;\n  cursor: pointer;\n  background: #fff8;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.preview .tile:hover {\n  --text-color: var(--brand-color);\n}\n\n.preview .tile > div {\n  font-family: Menlo, Monaco, monospace;\n  whitespace: no-wrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 14px;\n  line-height: 1.5;\n}\n```\n\nThese icons are completely unstyled and can be colored using the css `fill` property. This will\nprobably be broken out as a standalone library to allow the use of whatever icons you like\n(its source data is currently generated from an [icomoon](https://icomoon.com/app)\n`selection.json` file, but could just as easily be generated from a directory full of SVGs).\n\n## `<xin-icon>`\n\n`<xin-icon>` is a simple component that lets you embed icons as HTML. Check the CSS tab to see\nhow it's styled.\n\n`<xin-icon>` supports two attributes:\n\n- `icon` is the name of the icon\n- `color` is the fill color (if you don't want to style it using CSS)\n\n```html\n<xin-icon class=\"demo-2\" icon=\"game\" color=\"var(--brand-color)\"></xin-icon>\n```\n```css\nxin-icon.demo-2 > svg {\n  height: 96px;\n}\n```\n\n## Why?\n\nThe motivation behind this is to avoid dealing with tooling issues that inevitably result from\nintegrating custom icon fonts or stylesheets needed by code libraries (and an icon-font also needs\na style-sheet. Importing code is simply easier (and as a bonus, more compact and flexible, and there's\nno question as to when the stuff is available).\n\nThese icons are mainly sourced from [feather](https://github.com/feathericons/feather), but\nall the icons have been processed to have integer coordinates in a `viewBox` typically scaled to 1024  &times; 1024.",
    "title": "icons",
    "filename": "icons.ts",
    "path": "src/icons.ts"
  },
  {
    "text": "# example\n\n`<xin-example>` makes it easy to insert interactive code examples in a web page.\nIt's effectively a super lightweight fiddle based on the `b8rjs`'s `fiddle` component\n(which I miss dearly).\n\n*You're probably looking at it right now.*\n\n```js\n// this code executes in an async function body\n// it has xinjs, xinjsui, and preview (the preview div) available as local variables\nconst { div } = xinjs.elements\npreview.append(div({class: 'example'}, 'fiddle de dee!'))\npreview.append('Try editing some code and hitting refresh…')\n```\n```html\n<h2>Example</h2>\n```\n```css\n.preview {\n  padding: 0 var(--spacing);\n}\n\n.example {\n  animation: throb ease-in-out 1s infinite alternate;\n}\n\n@keyframes throb {\n  from { color: blue }\n  to { color: red }\n}\n```\n\nYou can simply wrap it around a sequence of code blocks in the DOM with the\nlanguages (js, html, css) as annotations or you can directly set the `js`, `html`,\nand `css` properties.\n\n## context\n\nA `<xin-example>` can be given a `context` object {[key: string]: any}, which is the\nset of values available in the javascript's execution context (it is wrapped in an\nasync function and passed those values). By default, that context comprises `preview`\n(the `<div>` in which the example is rendered), `xinjs` (`* from xinjs`),\nand `xinjsui` (`* from xinjsui`).\n\nThe `LiveExample` class provides the static `insertExamples(element: HTMLElement)`\nfunction that will replace any sequence of\n`pre code[class=\"language-html\"],pre code[class=\"language-js\"],pre code[class=\"language-css\"]`\nelements with a `<xin-example>` instance.",
    "title": "example",
    "filename": "live-example.ts",
    "path": "src/live-example.ts"
  },
  {
    "text": "# makeSorter\n\nI'm always confusing myself when writing sort functions, so I wrote `makeSorter()`. It's\ninsanely simple and just works™. It makes writing an array sort callback for anything\nother than an array of numbers or strings easier.\n\n```js\nconst { select, option, div, span, ul, li } = xinjs.elements\nconst { icons, makeSorter } = xinjsui\n\nconst people = [\n  { first: 'Frasier', last: 'Crane', age: 38 },\n  { first: 'Lilith', last: 'Crane', age: 37 },\n  { first: 'Rebecca', last: 'Howe', age: 35 },\n  { first: 'Woody', last: 'Boyd', age: 25 },\n  { first: 'Sam', last: 'Malone', age: 40 },\n  { first: 'Norm', last: 'Peterson', age: 38 },\n]\n\nconst sorters = {\n  firstSort: makeSorter(person => [person.first]),\n  firstDescSort: makeSorter(person => [person.first], false),\n  nameSort: makeSorter(person => [person.last, person.first]),\n  ageFirst: makeSorter(person => [-person.age, person.last]),\n  ageLast: makeSorter(person => [person.age, person.first], [true, false]),\n}\n\nfunction person({first, last, age}) {\n  return li(`${first} ${last}, ${age}`)\n}\n\nconst list = ul()\nsortPicker = select(\n  option('Sort by first', {value: 'firstSort'}),\n  option('Sort by first (desc)', {value: 'firstDescSort'}),\n  option('Sort by last, first', {value: 'nameSort'}),\n  option('Sort by age (desc), first', {value: 'ageFirst'}),\n  option('Sort by age, last (desc)', {value: 'ageLast'}),\n  {\n    onChange: render,\n    value: 'nameSort'\n  },\n)\n\nfunction render () {\n  list.textContent = ''\n  list.append(...people.sort(sorters[sortPicker.value]).map(person))\n}\n\npreview.append(\n  div(\n    sortPicker,\n    icons.chevronDown()\n  ),\n  list\n)\n\nrender()\n```\n```css\n.preview {\n  padding: var(--spacing);\n}\n\n.preview div {\n  position: absolute;\n  top: var(--spacing);\n  right: var(--spacing);\n}\n```\n\n## Details\n\nTo create a sort callback that sorts by propA then propB (if propA is tied):\n\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB]\n)\n```\n\nAs above, but sort descending:\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB],\n  false\n)\n```\n\nAs above but propA is sorted ascending, propB descending\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB],\n  [true, false]\n)\n```",
    "title": "makeSorter",
    "filename": "make-sorter.ts",
    "path": "src/make-sorter.ts"
  },
  {
    "text": "# map\n\nA [mapboxgl](https://docs.mapbox.com/mapbox-gl-js/api/) wrapper.\n\n```html\n<!-- please don't abuse my mapbox token -->\n<xin-map\n  style=\"width: 100%; height: 100%\"\n  coords=\"14.0093606,120.995083,17\"\n  token=\"pk.eyJ1IjoicG9kcGVyc29uIiwiYSI6ImNqc2JlbWU0bjA1ZmY0YW5ycHZod3VhbWcifQ.arvqfpOqMgFYkKgQ35UScA\"\n  map-style=\"mapbox://styles/mapbox/satellite-v9\"\n></xin-map>\n```\n\nThere's no need to learn new APIs or write wrappers, just access the element's `map` property\nand [use the standard mapbox APIs directly](https://docs.mapbox.com/).",
    "title": "map",
    "filename": "mapbox.ts",
    "path": "src/mapbox.ts"
  },
  {
    "text": "# markdown\n\n`<xin-md>` renders markdown using [marked](https://www.npmjs.com/package/marked).\n\n`<xin-md>` renders [markdown](https://www.markdownguide.org/) anywhere, either using the\n`src` attribute to load the file asynchronously, or rendering the text inside it.\n\n```html\n<xin-md>\n## hello\nworld\n</xin-md>\n```\n```css\nxin-md {\n  display: block;\n  padding: var(--spacing);\n}\n```\n\nNote that, by default, `<xin-md>` will use its `textContent` (not its `innerHTML`) as its source.\n\n## rendering markdown from a url\n\nAgain, like an `<img>` tag, you can simply set a `<xin-md>`'s `src` attribute to a URL pointing\nto markdown source and it will load it asynchronously and render it.\n\n```\n<xin-md src=\"/path/to/file.md\">\n```\n\n## setting its `value`\n\nOr, just set the element's `value` and it will render it for you. You can try\nthis in the console, e.g.\n\n```\n$('.preview xin-md').value = 'testing\\n\\n## this is a test'\n```\n\n## elements\n\n`<xin-md>` also (optionally) allows the embedding of inline HTML elements without blocking markdown\nrendering, so that you can embed specific elements while retaining markdown. You need to explicitly set\nthe `elements` property, and for markdown rendering not to be blocked, the html elements need to\nstart on a new line and not be indented. E.g.\n\n```html\n<xin-md elements>\n<form>\n### this is a form\n<label>\nfill in this field.\n**It's important!**\n<input>\n</label>\n</form>\n</xin-md>\n```\n\nIn this case `<xin-md>` uses its `innerHTML` and not its `textContent`.\n\n## context and template variables\n\n`<xin-md>` also supports **template** values. You need to provide data to the element in the form\nof `context` (an arbitrary object, or a JSON string), and then embed the template text using\nhandlebars-style doubled curly braces, e.g. `{{path.to.value}}`.\n\nIf no value is found, the original text is passed through.\n\nFinally, note that template substitution occurs *before* markdown transformation, which means you can\npass context data through to HTML elements.\n\n```html\n<xin-md\n  elements\n  context='{\"title\": \"template example\", \"foo\": {\"bar\": 17}, \"nested\": \"*work*: {{foo.bar}}\"}'\n>\n## {{title}}\n\nThe magic number is <input type=\"number\" value={{foo.bar}}>\n\nOh, and nested templates {{nested}}.\n</xin-md>\n```",
    "title": "markdown",
    "filename": "markdown-viewer.ts",
    "path": "src/markdown-viewer.ts"
  },
  {
    "text": "# popFloat\n\nThere are so many cases in user-interfaces where it's useful to pop-up a floating\nuser interface element that a simple and reliable way of doing this seems like\na good idea.\n\nThe problem with many such approaches is that they assume a highly specific\nuse-case (e.g. popup menu or combo box) and while meeting the creator's intended\npurpose admirably, turn out to have some annoying limitation that prevents them\nhandling the specific case at hand.\n\n```js\nconst { popFloat, positionFloat } = xinjsui\nconst { button } = xinjs.elements\nconst grid = preview.querySelector('.grid')\n\ngrid.addEventListener('click', (event) => {\n  const { target } = event\n  const float = preview.querySelector('xin-float')\n  if (float === null) {\n    // create and position a float\n    preview.append(\n      popFloat({\n        content: [\n          'hello, I am a float',\n          button('close me', {\n            onClick(event){\n              event.target.closest('xin-float').remove()\n            }\n          })\n        ],\n        target,\n        position: target.dataset.float\n      })\n    )\n  } else {\n    // position an existing float\n    positionFloat(float, target, target.dataset.float)\n  }\n})\n```\n```html\n<h2>Pop Float Demo</h2>\n<div class=\"grid\">\n  <button data-float=\"nw\">nw</button>\n  <button data-float=\"n\">n</button>\n  <button data-float=\"ne\">ne</button>\n  <button data-float=\"w\">w</button>\n  <button data-float=\"auto\">auto</button>\n  <button data-float=\"e\">e</button>\n  <button data-float=\"sw\">sw</button>\n  <button data-float=\"s\">s</button>\n  <button data-float=\"se\">se</button>\n</div>\n```\n```css\n.preview .grid {\n  display: grid;\n  grid-template-columns: 80px 80px 80px;\n}\n\n.preview xin-float {\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  padding: 10px;\n  background: white;\n  box-shadow: 2px 10px 5px #0004;\n}\n```\n\n## popFloat\n\n```\nexport interface PopFloatOptions {\n  content: HTMLElement | ElementPart[]\n  target: HTMLElement\n  position?: FloatPosition\n}\n\nexport const popFloat = (options: PopFloatOptions): XinFloat\n```\n\nCreate a `<xin-float>` with the content provided, positioned as specified (or automatically).\n\n## positionFloat\n\n```\nexport const positionFloat = (\n  element: HTMLElement,\n  target: HTMLElement,\n  position?: FloatPosition\n): void\n```\n\nThis allows you to, for example, provide a global menu that can be used on any element\ninstead of needing to have a whole instance of the menu wrapped around every instance\nof the thing you want the menu to affect (a common anti-pattern of front-end frameworks).\n\n## FloatPosition\n\n```\nexport type FloatPosition =\n| 'n'\n| 's'\n| 'e'\n| 'w'\n| 'ne'\n| 'nw'\n| 'se'\n| 'sw'\n| 'auto'\n```",
    "title": "popFloat",
    "filename": "pop-float.ts",
    "path": "src/pop-float.ts"
  },
  {
    "text": "# word (rich text editor)\n\n`<xin-word>` is a simple and easily extensible `document.execCommand` WYSIWYG editor with some conveniences.\n\n```html\n<xin-word widgets=\"minimal\">\n<h3>Heading</h3>\n<p>And some <b>text</b></p>\n</xin-word>\n```\n\nBy default, `<xin-word>` treats its initial contents as its document, but you can also set (and get)\nits `value`.\n\n## toolbar\n\n`<xin-word>` elements have a `toolbar` slot (actually a xin-slot because it doesn't use\nthe shadowDOM).\n\nIf you set the `widgets` attribute to `default` or `minimal` you will get a toolbar\nfor free. Or you can add your own custom widgets.\n\n## helper functions\n\nA number of helper functions are available, including:\n\n- `commandButton(title: string, command: string, iconClass: string)`\n- `blockStyle(options: Array<{caption: string, tagType: string}>)`\n- `spacer(width = '10px')`\n- `elastic(width = '10px')`\n\nThese each create a toolbar widget. A `blockStyle`-generated `<select>` element will\nautomatically have its value changed based on the current selection.\n\n## properties\n\nA `<xin-word>` element also has `selectedText` and `selectedBlocks` properties, allowing\nyou to easily perform operations on text selections, and a `selectionChange` callback (which\nsimply passes through document `selectionchange` events, but also passes a reference to\nthe `<xin-word>` component).",
    "title": "word (rich text editor)",
    "filename": "rich-text.ts",
    "path": "src/rich-text.ts"
  },
  {
    "text": "# sidebar\n\nThe default layout for iOS / iPadOS apps is to hide the sidebar when displaying content on small\nscreens, and display the sidebar when space is available (with the user able to explicitly hide\nthe sidebar if so desired). `<xin-sidenav>` provides this functionality.\n\n`<xin-sidenav>` is used to handle the layout of the documentation tab panel.\n\n`<xin-sidenav>`'s behavior is controlled by two attributes, `minSize` is the point at which it will toggle between showing the navigation\nsidebar and content, while `navSize` is the width of the sidebar. You can interrogate its `compact` property to find out if it's\ncurrently in `compact` form.",
    "title": "sidebar",
    "filename": "side-nav.ts",
    "path": "src/side-nav.ts"
  },
  {
    "text": "# size-break\n\nWhile we wait for enough browsers to implement [container-queries](https://www.w3.org/TR/css-contain-3/),\nand in any event when you simply want to do different things at different sizes (e.g. in the project I'm\nworking on right now, a row of buttons turns into a menu at narrow widths) there's `<xin-sizebreak>`.\n\nNote that the sizes referred to are of the `<xin-sizebreak>`'s `.offsetParent`, and it watches for\nthe window's `resize` events and its own (via `ResizeObserver`).\n\n```js\nconst { trackDrag } = xinjsui\n\nconst container = preview.querySelector('.container')\nconst sizer = preview.querySelector('.sizer')\n\nfunction resize(event) {\n  const w = container.offsetWidth\n  const h = container.offsetHeight\n  trackDrag(event, (dx, dy, event) => {\n    container.style.width = (w + dx) + 'px'\n    container.style.height = (h + dy) + 'px'\n    return event.type === 'mouseup'\n  }, 'nwse-resize')\n}\n\nsizer.addEventListener('mousedown', resize, 'nwse-resize')\nsizer.addEventListener('touchstart', resize, 'nwse-resize')\n```\n```html\n<div class=\"container\">\n  <xin-sizebreak min-width=\"150\" min-height=\"80\">\n    <h1>BIG!</h1>\n    <i slot=\"small\">little</i>\n  </xin-sizebreak>\n  <xin-icon class=\"sizer\" icon=\"resize\"></xin-icon>\n</div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.preview xin-sizebreak {\n  width: 100%;\n  height: 100%;\n  background: #fff8;\n  border: 1px solid #aaa;\n}\n\n.preview xin-sizebreak * {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n.preview .container {\n  position: relative;\n  min-width: 100px;\n  min-height: 40px;\n  max-height: 100%;\n  width: 400px;\n  height: 100px;\n}\n\n.preview .sizer {\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n  background: #0002;\n  bottom: 0;\n  right: 0;\n  cursor: nwse-resize;\n  opacity: 0.5;\n}\n\n.preview .sizer:hover {\n  opacity: 1.0;\n}\n```\n\n`<xin-sizebreak>` supports both `min-width` and/or `min-height`, and you can of course target only one\nof the slots if you like. The demo site uses them to hide the [bundlejs](https://bundlejs.com/) badge when\nspace is tight.",
    "title": "size-break",
    "filename": "size-break.ts",
    "path": "src/size-break.ts"
  },
  {
    "text": "# tabs\n\n`<xin-tabs>` creates a `tabpanel` for its children, creating a `tab` for each based on its\n`name` attribute.\n\n```js\n[...preview.querySelectorAll('div[name]')].forEach(div => {\n  div.style.color = `hsl(${(Math.random() * 360).toFixed(0)} 50% 50%)`\n})\n\nconst { div, button } = xinjs.elements\nconst tabSelector = preview.querySelector('xin-tabs')\n\nlet bodycount = 0\npreview.querySelector('.add').addEventListener('click', () => {\n  const name = `new tab ${++bodycount}`\n  const body = div(\n    {name, dataClose: true},\n    name,\n  )\n  tabSelector.addTabBody(body, true)\n})\n```\n```html\n<xin-tabs>\n  <div name=\"first\">first body</div>\n  <div name=\"second\" data-close>second body</div>\n  <div name=\"third\">third body</div>\n  <button class=\"add\" slot=\"after-tabs\">\n    <xin-icon icon=\"plus\"></xin-icon>\n  </button>\n</xin-tabs>\n```\n```css\n  .preview xin-tabs {\n    height: 100%;\n  }\n\n  .preview div[name] {\n    padding: 20px;\n    text-align: center;\n    height: 100%;\n    font-size: 200%;\n  }\n```\n\nThe `<xin-tabs>`s `value` is the index of its active body.\n\nA `<xin-tabs>` has `addTabBody(body: HTMLElement, select?: boolean)` and\n`removeTabBody(body: number | HTMLElement)` methods for updating its content.",
    "title": "tabs",
    "filename": "tab-selector.ts",
    "path": "src/tab-selector.ts"
  },
  {
    "text": "# trackDrag\n\nSometimes you want to track a mouse-drag or touch-drag operation without messing around.\nThis is how the resizeable columns in `<xin-table>` work.\n\nJust call `trackDrag(event, (dx, dy, event) => { ... })` and you'll get updates on corresponding events until\nyou return `true` from the event-handler (or, in the case of `touch` events, the last `touch` ends).\nFor mouse events, a \"tracker\" element is thrown up in front of everything for the event.\n\n```html\n<p>\n  Try dragging the squares…<br>\n  (You can drag them separately with multi-touch!)\n</p>\n<div class=\"draggable\" style=\"top: 20px; left: 40px; background: #f008\"></div>\n<div class=\"draggable\" style=\"left: 40%; bottom: 30%; background: #0f08\"></div>\n<div class=\"draggable\" style=\"bottom: 30px; right: 10px; background: #00f8\"></div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.draggable {\n  content: ' ';\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  cursor: move;\n}\n\n.preview p {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n```\n```js\nconst { trackDrag } = xinjsui\n\nfunction dragItem(event) {\n  const draggable = event.target\n  if (draggable.classList.contains('draggable')) {\n    const x = draggable.offsetLeft\n    const y = draggable.offsetTop\n    trackDrag(event, (dx, dy, event) => {\n      draggable.style.left = (x + dx) + 'px'\n      draggable.style.top = (y + dy) + 'px'\n      draggable.style.bottom = 'auto'\n      draggable.style.right = 'auto'\n      return event.type === 'mouseup'\n    })\n  }\n}\n\npreview.addEventListener('mousedown', dragItem )\npreview.addEventListener('touchstart', dragItem, { passive: true } )\n```\n\nFor `touch` events, `dx` and `dy` are based on tracking `event.changedTouches[0]` which\nis almost certainly what you want.\n\nTo handle multi-touch gestures you will need to track the touches yourself.\n\n## `findHighestZ()`\n\n`findHighestZ()` is a utility function for finding the highest z-index of any element\nin the DOM.",
    "title": "trackDrag",
    "filename": "track-drag.ts",
    "path": "src/track-drag.ts"
  },
  {
    "text": "# scriptTag & styleSheet\n\n## scriptTag\n\nIf you need to load an old school (cjs) javascript or css library via cdn then use these two functions.\n\n`xinjs-ui` uses this library to implement the `<xin-code>`, `<xin-lottie>`, and `<xin-map>`\nelements.\n\n`scriptTag()` and `styleSheet()` return promises that resolve `globalThis` when the module in question\nhas loaded and otherwise behave as much like `import()` as possible.\n\nUsing `scriptTag`:\n\n```html\n<!-- inline styles needed because chart.js overrides stylesheet -->\n<canvas style=\"height: 100%; width: 100%\"></canvas>\n```\n```js\nconst { scriptTag } = xinjsui\n\n// Note that the current version of Chart.js is an ES6 module so you could just use `import()` instead\nconst { Chart } = await scriptTag('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js')\nconst data = {\n  labels: ['first', 'second', 'third'],\n  datasets: [\n    {\n      label: 'amazingness',\n      backgroundColor: '#fff4',\n      borderColor: '#f008',\n      borderWidth: 2,\n      data: [21, 27, 57]\n    }\n  ]\n}\nconst options = {\n  scales: {\n    yAxes:[{\n      stacked:true,\n      gridLines: {\n        display:true,\n        color: '#00f2'\n      }\n    }],\n    xAxes:[{\n      gridLines: {\n        display:false\n      }\n    }]\n  }\n}\n\nChart.Bar(preview.querySelector('canvas'), {data, options})\n```\n\nNote that `scriptTag` will resolve `globalThis` so it behaves as much like async `import()`\nas possible.\n\nAs an aside:\n\n`<xin-lottie>` is implemented in such a way that if you've preloaded the module\n(e.g. via a script tag or packaging) it won't load it again, which affords offline\nuse.\n\nThere's no point for `<xin-map>` since it won't work without connectivity anyway.\n\n## styleSheet\n\nstyleSheet creates a `<link>` tag for a specified css file.\n\nUsing `styleSheet`:\n\n    styleSheet('../path/to/style.css')\n\nThis is awaitable, if you care. The stylesheet `<link>` will only be inserted _once_.",
    "title": "scriptTag & styleSheet",
    "filename": "via-tag.ts",
    "path": "src/via-tag.ts"
  }
]

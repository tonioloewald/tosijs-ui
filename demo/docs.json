[
  {
    "text": "# xinjs-ui\n\n<!--{ \"pin\": \"top\" }-->\n\n[ui.xinjs.net live demo](https://ui.xinjs.net) [xinjs](https://xinjs.net) [discord](https://discord.gg/ramJ9rgky5) [github](https://github.com/tonioloewald/xinjs-ui#readme) [npm](https://www.npmjs.com/package/xinjs-ui)\n\nCopyright ©2023 Tonio Loewald\n\n## the xinjs ui library\n\nIn general, `xinjs` strives to work _with_ the browser rather than trying to _replace_ it.\n\nIn a similar vein, `xinjs-ui` comprises a collection of [web-components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)\nwith the goal of augmenting what _already_ works well, and the components are intended be interoperable as\nsimilar as possible to things that you already use, such as `<input>` or `<select>` elements.\nE.g. where appropriate, the `value` of an element is its malleable `state`, and when this changes,\nthe element emits a `change` event.\n\nSimilarly, the xinjs base `Component` class and the components in this collection strive to\nbe as similar in operation as possible to DOM elements as makes sense. E.g. binary attributes\nwork as expected. Adding the `hidden` attribute makes them disappear. If a component subclass\nhas a `value` property then it will be rendered if the value changes (similarly it will be\nrendered if an initialized attribute is changed). Intinsic properties of components will\ndefault to `null` rather than `undefined`.\n\nSimilarly, because web-components are highly interoperable, there's no reason to reinvent\nwheels. In particular, this library won't try to replace existing, excellent libraries\nsuch as [shoelace.style](https://shoelace.style/) or wrap perfectly functional HTML\nelements, like the venerable `<input>` or `<form>` elements that are already capable\nand accessible.\n\nThe goal here is to provide useful components and other utilities that add to what's built\ninto HTML5 and CSS3 and to make custom-elements work as much as possible like drop-in replacements\nfor an `<input>` or `<textarea>` (while mitigating the historical pathologies of things like\n`<select>` and `<input type=\"radio\">`). E.g. the `<xin-select>` does not suffer from a\nrace-condition between having its value set and being given an `<option>` with the intended value\nand you can differentiate between the user picking a value (`action`) and the value changing (`change`).\n\n## custom elements\n\nThe simplest way to use these elements is to simply import the element and then either\nuse HTML or the `ElementCreator` function exported.\n\nE.g. to use the markdown viewer:\n\n```\nimport { markdownViewer } from 'xinjs-ui'\ndocument.body.append(markdownViewer('# hello world\\nthis is a test'))\n```\n\n```js\nconst { markdownViewer } = xinjsui\n\npreview.append(\n  markdownViewer(`\n## hello world\nhere is some markdown\n`)\n)\n```\n\nAssuming you import the module somewhere, the HTML will work as well.\n\n```\n<xin-md>\n## hello world\nhere is some markdown\n</xin-md>\n```\n\nThe big difference with using the `markdownViewer()` function is that the `xinjs` `Component`\nclass will automatically pick a new tag if the expected tag is taken (e.g. by a previously\ndefined custom-element from another library). `markdownViewer()` will create an element of\nthe correct type.\n\nThe other thing is that `xinjs` `ElementCreator` functions are convenient and composable,\nallowing you to build DOM elements with less code than pretty much any other option, including\nJSX, TSX, or HTML.\n",
    "title": "xinjs-ui",
    "filename": "README.md",
    "path": "README.md",
    "pin": "top"
  },
  {
    "text": "# 3d\n\nA [babylonjs](https://www.babylonjs.com/) wrapper.\n\nA `<xin-3d>` element is initialized with an `engine`, `canvas`, `scene`, and an update-loop.\n\nIf you view this example with an XR-enabled device, such as the\n[Meta Quest 3](https://www.meta.com/quest/quest-3/), then you should be able to view this\nas an AR scene.\n\n```js\nconst { b3d, gamepadText, xrControllers, xrControllersText } = xinjsui\n\npreview.append(b3d({\n  async sceneCreated(element, BABYLON) {\n    const camera = new BABYLON.FreeCamera(\n      'camera',\n      new BABYLON.Vector3(0, 1, -4),\n      element.scene\n    )\n    camera.attachControl(element.parts.canvas, true)\n\n    new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0.25, 1, -0.5))\n\n    this.loadScene('/', 'xin3d.glb')\n\n    const size = 1024\n    const textTexture = new BABYLON.DynamicTexture('Text', size, element.scene)\n    const textContext = textTexture.getContext()\n    textTexture.update()\n\n    const textMaterial = new BABYLON.StandardMaterial('Text', element.scene)\n    textMaterial.diffuseTexture = textTexture\n    textMaterial.emissiveTexture = textTexture\n    textMaterial.backfaceCulling = false\n\n    const plaque = BABYLON.MeshBuilder.CreatePlane('Plaque', {size: 1}, element.scene)\n    plaque.position.x = 0\n    plaque.position.y = 2\n    plaque.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL\n    plaque.material = textMaterial\n\n    let controllers\n    if (navigator.xr) {\n      const xrHelper = await element.scene.createDefaultXRExperienceAsync({\n        uiOptions: {\n          sessionMode: 'immersive-ar'\n        }\n      })\n      controllers = xrControllers(xrHelper)\n    }\n\n    const interval = setInterval(() => {\n      if (document.body.contains(element)) {\n        textContext.fillStyle = '#204020'\n        textContext.fillRect(0, 0, size, size)\n        const text = gamepadText() + '\\n' + xrControllersText(controllers)\n        const lines = text.split('\\n')\n        textContext.fillStyle = '#afa'\n        textContext.font = '32px monospace'\n        for(let i = 0; i < lines.length; i++) {\n          const line = lines[i]\n          textContext.fillText(line, 40, 70 + i * 40)\n        }\n        textContext.fillStyle = '#bbb'\n        textContext.fillText('xinjs-xr — debug info', 40, 984)\n        textTexture.update()\n      } else {\n        clearInterval(interval)\n      }\n    }, 100)\n  },\n}))\n```\n```css\n.preview xin-3d {\n  width: 100%;\n  height: 100%;\n}\n```\n\nYou can access the `scene` and `engine` properties. You can also assign `sceneCreated`\nand `update` callbacks that will be executed when the scene is first initialized and\nbefore each update, respectively. (See the example, it does both.)\n\nBoth `sceneCreated` and `update` may be `async`. The component will `await` `sceneCreated`\nbefore starting the renderLoop, but `update` is simply passed to babylon, so be careful.\n\nBy default, this component loads `babylon.js` from the [babylonjs CDN](https://doc.babylonjs.com/setup/frameworkPackages/CDN),\nbut if `BABYLON` is already defined (e.g. if you've bundled it) then it will use that instead.\n\nIf you need additional libraries, e.g. `https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js` for loading models such as `gltf` and `glb` files, you should load those in `sceneCreated`.\n\nHere's a simple example of a terrain mesh comprising 125k triangles.\n\n```js\nconst { b3d } = xinjsui\n\npreview.append(b3d({\n  async sceneCreated(element, BABYLON) {\n    const { scene } = element\n    const { createNoise2D } = await import('https://cdn.jsdelivr.net/npm/simplex-noise@4.0.1/+esm')\n\n    new BABYLON.HemisphericLight('light', new BABYLON.Vector3(0.25, 1, 2))\n\n    const terrain = new BABYLON.Mesh('terrain', scene)\n    const vertexData = new BABYLON.VertexData()\n\n    const noise2D = createNoise2D()\n    const positions = []\n    const indices = []\n    const gridSize = 100\n    const gridResolution = 250\n    const gridPoints = gridResolution + 1\n    const noiseScale = 0.03\n    const heightScale = 4.5\n    terrain.position.y = -5\n    const scale = t => t * gridSize / gridResolution - gridSize * 0.5\n    for(let x = 0; x <= gridResolution; x++) {\n      for(let z = 0; z <= gridResolution; z++) {\n        positions.push(scale(x), noise2D(scale(x) * noiseScale, scale(z) * noiseScale) * heightScale, scale(z))\n        if (x > 0 && z > 0) {\n          const i = x * gridPoints + z\n          indices.push(\n            i, i - gridPoints - 1, i - 1,\n            i, i - gridPoints, i - gridPoints - 1,\n          )\n        }\n      }\n    }\n    const normals = []\n    BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n\n    vertexData.positions = positions\n    vertexData.indices = indices\n    vertexData.normals = normals\n    vertexData.applyToMesh(terrain)\n  },\n}))\n```\n\n## loadScene\n\n`<xin-3d>.loadScene(path: string, file: string, callBack(meshes: any[]): void)` can\nbe used to load `.glb` files.\n\n## loadUI\n\n`<xin-3d>.loadUI(options: B3dUIOptions)` loads babylonjs guis, which you can create programmatically or using the [babylonjs gui tool](https://gui.babylonjs.com/).",
    "title": "3d",
    "filename": "babylon-3d.ts",
    "path": "src/babylon-3d.ts"
  },
  {
    "text": "# ab-test\n\n`<xin-ab>` provides a simple method for implementing A|B-testing.\n\n```js\nconst { AbTest } = xinjsui\n\nAbTest.conditions = {\n  testA: true,\n  testB: false,\n  testC: Math.random() < 0.5\n}\n```\n```html\n<xin-ab condition=\"testA\">\n  <p>Visible if conditions.testA === true</p>\n</xin-ab>\n<xin-ab condition=\"testB\">\n  <p>Visible if conditions.testB === true</p>\n</xin-ab>\n<xin-ab not condition=\"testB\">\n  <p>Visible if conditions.testB !== true</p>\n</xin-ab>\n<xin-ab condition=\"testC\">\n  <p>Visible if conditions.testC === true (50/50 chance)</p>\n</xin-ab>\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: flex-start;\n}\n.preview p {\n  background: #44c;\n  color: white;\n  display: block;\n  border-radius: 99px;\n  padding: 4px 10px;\n  margin: 0;\n}\n```\n\n1. Set `AbTest.conditions` to anything you like.\n2. Use `<xin-ab>` elements to display conditional content.\n\nIf the value referenced by `condition` is `false` then the content\nof `<xin-ab>` will be hidden (this is reversed if `not` is set).",
    "title": "ab-test",
    "filename": "ab-test.ts",
    "path": "src/ab-test.ts"
  },
  {
    "text": "# carousel\n\n```html\n<xin-carousel arrows dots max-visible-items=2>\n  <div class=\"thing pink\">item 1</div>\n  <div class=\"thing green\">item 2</div>\n  <div class=\"thing blue\">item 3</div>\n  <div class=\"thing yellow\">item 4</div>\n  <div class=\"thing pink\">item 5</div>\n  <div class=\"thing green\">item 6</div>\n  <div class=\"thing blue\">item 7</div>\n</xin-carousel>\n```\n```css\n.thing {\n  width: 200px;\n  height: 200px;\n  line-height: 200px;\n  text-align: center;\n  font-size: 32px;\n}\n\n.pink {\n  background: #fdd;\n}\n\n.green {\n  background: #dfd;\n}\n\n.blue {\n  background: #ddf;\n}\n\n.yellow {\n  background: #ffd;\n}\n```\n\nThis is a minimalist carousel component that supports the usual stuff.\n\n## Attributes\n\n- `arrows` (boolean, false by default) shows/hides the arrow paging controls\n- `dots` (boolean, false by default) shows/hides the dot progress indicators\n- `max-visible-items` (number, 1 by default) determines how many items are shown at once.\n- `snap-duration` (number, 0.25 [seconds] by default) determines the time taken to scroll / snap scroll.\n- `snap-delay` (number, 0.1 [seconds] by default)\n\n## Styling\n\nInspect the DOM to see all the CSS-variables available for styling this component.",
    "title": "carousel",
    "filename": "carousel.ts",
    "path": "src/carousel.ts"
  },
  {
    "text": "# code\n\nAn [ACE Editor](https://ace.c9.io/) wrapper.\n\nSometimes, it's nice to be able to just toss a code-editor in a web-page.\n\n`<xin-code>`'s `value` is the code it contains. Its `mode` attribute sets the language, and you can further configure\nthe ACE editor instance via its `options` property.\n\n```html\n<xin-code style=\"width: 100%; height: 100%\" mode=\"css\">\nbody {\n  box-sizing: border-box;\n}\n</xin-code>\n```",
    "title": "code",
    "filename": "code-editor.ts",
    "path": "src/code-editor.ts"
  },
  {
    "text": "# editable-rect\n\n`<xin-editable>` (`editableRect` is the `ElementCreator` and `EditableRect` is the class) is an element\nfor allowing the adjustment of another element's position and size. Simply insert it in a `position: absolute`\nor `position: fixed` element and you can directly adjust its CSS positioning, including rotation.\n\nClick on an element to adjust its position, dimensions, and rotation.\n\n```js\nconst { editableRect, icons } = xinjsui\nconst { elements } = xinjs\nconst { button } = elements\n\nfunction showTools(event) {\n  event.stopPropagation()\n  event.preventDefault()\n}\n\nconst editable = editableRect(button({class: 'more-popup', onClick: showTools}, icons.moreVertical()))\npreview.addEventListener('click', (event) => {\n  const target = event.target\n  if (['absolute', 'fixed'].includes(getComputedStyle(target).position)) {\n    target.append(editable)\n  } else {\n    editable.remove()\n  }\n})\npreview.addEventListener('change', event => console.log(event))\n```\n```html\n<div class=\"editable\" style=\"top: 20px; left: 20px; width: auto; height: auto; right: 20px; bottom: 20px;\">\n  <div class=\"editable\" style=\"top: 20px; left: 20px; width: 200px; height: 150px;\">\n  </div>\n  <div class=\"editable\" style=\"bottom: 20px; top: 20px; width: 300px; height: auto; right: 20px;\">\n  </div>\n</div>\n```\n```css\n.preview .editable {\n  position: absolute;\n  box-shadow: inset 0 0 0 1px #0ccc;\n  background: #0cc1;\n}\n\n.preview button.more-popup {\n  position: absolute;\n  width: 44px;\n  height: 44px;\n  top: 2px;\n  right: 2px;\n  --text-color: black;\n  background: transparent;\n  box-shadow: none;\n}\n\n.previw button\n```\n\n## Snapping\n\nWhen `EditableRect.snapToGrid === true` or the shift-key is depresseed, position will snap to `EditableRect.gridSize` pixels (default = 8).\n\nSimilarly `EditableRect.snapAngle === true` or the shift-key will snap rotation to increments of `EditableRect.angleSize` degrees (default = 15).\n\n## Events\n\nAfter an element's position, size, or rotation are adjusted a `change` event is triggered on the element.",
    "title": "editable-rect",
    "filename": "editable-rect.ts",
    "path": "src/editable-rect.ts"
  },
  {
    "text": "# example\n\n`<xin-example>` makes it easy to insert interactive code examples in a web page. It\nstarted life as a super lightweight, easier-to-embed implementation of\n[b8rjs's fiddle component](https://b8rjs.com)—which I dearly missed—but now the student\nis, by far, the master. And it's still super lightweight.\n\n*You're probably looking at it right now.*\n\n```js\n// this code executes in an async function body\n// it has xinjs, xinjsui, and preview (the preview div) available as local variables\nconst { div } = xinjs.elements\npreview.append(div({class: 'example'}, 'fiddle de dee!'))\npreview.append('Try editing some code and hitting refresh…')\n```\n```html\n<h2>Example</h2>\n```\n```css\n.preview {\n  padding: 0 var(--spacing);\n}\n\n.example {\n  animation: throb ease-in-out 1s infinite alternate;\n}\n\n@keyframes throb {\n  from { color: blue }\n  to { color: red }\n}\n```\n\nYou can simply wrap it around a sequence of code blocks in the DOM with the\nlanguages (js, html, css) as annotations or you can directly set the `js`, `html`,\nand `css` properties.\n\n## Code-Editor\n\nThe **code-editor** is actually the same component spawned in a new window using\na couple of clever tricks, the most important of which is leveraging\n[StorageEvent](https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent).\n\nThis functionality was originally added to make working in XR easier, but it turned\nout that it's just better than the earlier way of doing things.\n\nIt actually uses just one `localStorage` item to handle any number of code-editors,\nand cleans up after itself when you close the example (including closing stray\nwindows.\n\n> **To Do** a little refactoring and tweaking to split the the editor off as a\ncompletely separate component that can be used for other things, and make the\nexample itself lighter-weight.\n\n## context\n\nA `<xin-example>` can be given a `context` object {[key: string]: any}, which is the\nset of values available in the javascript's execution context (it is wrapped in an\nasync function and passed those values). By default, that context comprises `preview`\n(the `<div>` in which the example is rendered), `xinjs` (`* from xinjs`),\nand `xinjsui` (`* from xinjsui`).\n\nThe `LiveExample` class provides the static `insertExamples(element: HTMLElement)`\nfunction that will replace any sequence of\n`pre code[class=\"language-html\"],pre code[class=\"language-js\"],pre code[class=\"language-css\"]`\nelements with a `<xin-example>` instance.",
    "title": "example",
    "filename": "live-example.ts",
    "path": "src/live-example.ts"
  },
  {
    "text": "# filter\n\nAutomatically creates `ArrayFilter` functions `(a: any[]) => any[]` based on the query you build using its\nmacOS Finder-inspired interface, using an easily customizable / extensible collection of `Filter` objects.\n\n```js\nconst { elements } = xinjs\nconst { dataTable, filterBuilder, availableFilters } = xinjsui\n\nconst sourceWords = ['acorn', 'bubblegum', 'copper', 'daisy', 'ellipse', 'fabulous', 'gerund', 'hopscotch', 'idiom', 'joke']\nfunction randomWords () {\n  let numWords = Math.random() * 4\n  const words = []\n  while (numWords > 0) {\n    numWords -= 1\n    words.push(sourceWords[Math.floor(Math.random() * 10)])\n  }\n  return [...new Set(words)]\n}\n\nconst array = []\nfor(let i = 0; i < 1000; i++) {\n  array.push({\n    date: new Date(Math.random() * Date.now()).toISOString().split('T')[0],\n    isLucky: Math.random() < 0.1,\n    number: Math.floor(Math.random() * 200 - 100),\n    string: randomWords().join(' '),\n    tags: randomWords()\n  })\n}\n\nconst { span } = elements\nconst tagsBinding = {\n  value: '^.tags',\n  binding: {\n    toDOM(element, value) {\n      element.classList.add('tag-list')\n      element.textContent = ''\n      element.append(...value.map(tag => span(tag, {class: 'tag'})))\n    }\n  }\n}\n\nconst columns = [\n  {\n    prop: 'date',\n    width: 120\n  },\n  {\n    prop: 'isLucky',\n    type: 'boolean',\n    width: 90\n  },\n  {\n    prop: 'number',\n    align: 'right',\n    width: 90\n  },\n  {\n    prop: 'string',\n    width: 200\n  },\n  {\n    prop: 'tags',\n    width: 200,\n    dataCell() {\n      return elements.div({ bind: tagsBinding })\n    }\n  },\n]\n\nconst table = dataTable({ array, columns })\nconst filter = filterBuilder({\n  fields: columns,\n  onChange(event) {\n    table.filter = filter.filter\n  }\n})\npreview.append(filter, table)\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n}\n\n.preview xin-table {\n  flex: 1 1 auto;\n}\n\n.preview .tag-list {\n  display: flex;\n  font-size: 80%;\n  align-items: center;\n  gap: 2px;\n}\n\n.preview .tag {\n  display: inline-block;\n  border-radius: 4px;\n  padding: 0 5px;\n  line-height: 20px;\n  height: 20px;\n  color: var(--brand-text-color);\n  background: var(--brand-color);\n}\n```\n\n## serialization\n\nThe current state of a `<xin-filter>` can be serialized as, and restored from, a Javascript object (which itself\ncan easily be converted into JSON or a URL component) via its `state` property. Obviously, a `<xin-filter>` can\nonly restore state if it has the necessary constituent `filters`.\n\n## availableFilters\n\n`<xin-filter>` has a default set of `FilterMaker` objects which it uses to construct filter function.\nIn the example above, the default collection of filters is reduced to `contains`, `equals`, `after`, and `isTrue`.\n\nThe full collection includes:\n\n- **contains** * looks for fields containing a string (ignoring case)\n- **equals** * looks for fields containing equivalent values (ignoring case)\n- **after** * looks for fields with a date after a provided value\n- **greaterThan** * looks for fields with a value greater than a provided value\n- **truthy** * looks for fields that are true / non-zero / non-empty\n- **true** looks for fields that are `true`\n- **false** looks for fields that are `false`\n- **hasTags** looks for fields that are arrays containing all the (space/comma) delimited strings\n- **doesNotHaveTags** looks for fields that are arrays containing *none* of the strings\n\n**Note**: the filters marked with an * have negative version (e.g. does not contain).\n\n```\ntype ObjectTest (obj: any) => boolean\n\ninterface FilterMaker {\n  caption: string                                 // describes the test condition\n  negative?: string                               // describes the negative test condition\n  needsValue?: boolean                            // if false, the filterMaker doesn't need a needle value\n  filterMaker(needle: any) => ObjectTest          // builds an ObjectTest\n}\n```",
    "title": "filter",
    "filename": "filter-builder.ts",
    "path": "src/filter-builder.ts"
  },
  {
    "text": "# float\n\nA floating, potentially draggable user interface element.\n\n```html\n<xin-float class=\"float\" remain-on-resize=\"remain\" remain-on-scroll=\"remain\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <div class=\"behavior\">I ignore resizing and scrolling</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n\n<xin-float class=\"float\" remain-on-scroll=\"remain\" style=\"top: 50px; right: 20px;\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <div class=\"behavior\">I disappear on resize</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n\n<xin-float class=\"float\" remain-on-resize=\"remain\" remain-on-scroll=\"remove\" style=\"bottom: 20px; left: 50px;\" drag>\n  <h4>Drag Me</h4>\n  <div class=\"no-drag balloon\">🎈</div>\n  <div class=\"behavior\">I disappear on scroll</div>\n  <footer style=\"font-size: 75%\">neunundneunzig pixel-ballon</footer>\n</xin-float>\n```\n```css\n.preview .float {\n  width: 220px;\n  height: 180px;\n  padding: 0;\n  gap: 5px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  background: #fff8;\n  box-shadow: 2px 10px 20px #0004;\n  overflow: hidden;\n  cursor: move;\n}\n\n.preview h4 {\n  margin: 0;\n  padding: 5px 10px;\n  color: white;\n  background: red;\n}\n\n.preview .balloon {\n  cursor: default;\n  flex: 1 1 auto;\n  font-size: 99px;\n  line-height: 120px;\n  text-align: center;\n  height: auto;\n  overflow: hidden;\n}\n\n.preview .behavior {\n  position: absolute;\n  bottom: 16px;\n  left: 8px;\n  right: 8px;\n  background: #fffc;\n}\n\n.preview footer {\n  text-align: center;\n  background: #f008;\n  color: white;\n```\n\n## Styling\n\nNote that the `<xin-float>` element has absolutely minimal styling. It's up to you to provide a drop\nshadow and background and so on.\n\n## Attributes\n\n- `drag` false | true — to make a `<xin-float>` element draggable, simply set its `drag` attribute.\n- `remain-on-resize` 'remove' | 'hide' | 'remain' — by default, floats will hide if the window is resized\n- `remain-on-scroll` 'remain' | 'remove' | 'hide' — by default, floats will remain if the document is scrolled\n\nNote that `remain-on-scroll` behavior applies to any scrolling in the document (including within the float) so\nif you want finer-grained disappearing behavior triggered by scrolling, you might want to implement it yourself.\n\nTo prevent dragging for an interior element (e.g. if you want a floating palette with buttons or input fields)\njust add the `no-drag` class to an element or its container.",
    "title": "float",
    "filename": "float.ts",
    "path": "src/float.ts"
  },
  {
    "text": "# forms\n\n`<xin-form>` and `<xin-field>` can be used to quickly create forms complete with\n[client-side validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#built-in_form_validation_examples).\n\n```js\nconst form = preview.querySelector('xin-form')\npreview.querySelector('.submit').addEventListener('click', form.submit)\n```\n```html\n<xin-form value='{\"formInitializer\": \"initial value of the form\"}'>\n  <h3 slot=\"header\">Example Form Header</h3>\n  <xin-field caption=\"Required field\" key=\"required\"></xin-field>\n  <xin-field optional key=\"optional\"><i>Optional</i> Field</xin-field>\n  <xin-field key=\"text\" type=\"text\" placeholder=\"type it in here\">Tell us a long story</xin-field>\n  <xin-field caption=\"Zip Code\" placeholder=\"12345 or 12345-6789\" key=\"zipcode\" pattern=\"\\d{5}(-\\d{4})?\"></xin-field>\n  <xin-field caption=\"Date\" key=\"date\" type=\"date\"></xin-field>\n  <xin-field caption=\"Number\" key=\"number\" type=\"number\"></xin-field>\n  <xin-field caption=\"Range\" key=\"range\" type=\"range\" min=\"0\" max=\"10\"></xin-field>\n  <xin-field key=\"boolean\" type=\"checkbox\">😃 <b>Agreed?!</b></xin-field>\n  <xin-field key=\"select\">\n    Custom Field\n    <select slot=\"input\">\n      <option>This</option>\n      <option>That</option>\n      <option>The Other</option>\n    </select>\n  </xin-field>\n  <xin-field key=\"rating\">\n    Rate this form!\n    <xin-rating slot=\"input\"></xin-rating>\n  </xin-field>\n  <xin-field key=\"amount\" fixed-precision=\"2\" type=\"number\" prefix=\"$\" suffix=\"(USD)\">\n    What's it worth?\n  </xin-field>\n  <xin-field key=\"valueInitializer\" value=\"initial value of the field\">\n    Initialized by field\n  </xin-field>\n  <xin-field key=\"formInitializer\">\n    Initialized by form\n  </xin-field>\n  <button slot=\"footer\" class=\"submit\">Submit</button>\n</xin-form>\n```\n```css\n.preview xin-form {\n  height: 100%;\n}\n\n.preview ::part(header), .preview ::part(footer) {\n  background: #ddd;\n  justify-content: center;\n  padding: calc(var(--spacing) * 0.5) var(--spacing);\n}\n\n.preview h3, .preview h4 {\n  margin: 0;\n  padding: 0;\n}\n\n.preview ::part(content) {\n  padding: var(--spacing);\n  gap: var(--spacing);\n  background: #e8e8e8;\n}\n\n.preview label {\n  display: grid;\n  grid-template-columns: 180px auto 100px;\n  gap: var(--spacing);\n}\n\n.preview label [part=\"caption\"] {\n  flex: 0 0 150px;\n  text-align: right;\n}\n\n.preview :invalid {\n  box-shadow: inset 0 0 2px red;\n}\n\n.preview label:has(:invalid:required)::after {\n  content: '* required'\n}\n```\n\n## `<xin-form>`\n\n`<xin-form>` prevents the default form behavior when a `submit` event is triggered and instead validates the\nform contents (generating feedback if desired) and calls its `onSubmit(value: {[key: string]: any}, isValid: boolean): void`\nmethod.\n\n`<xin-form>` instances have `value` and `isValid` properties you can access any time. Note that `isValid` is computed\nand triggers form validation.\n\n`<xin-form>` has `header` and `footer` `<slot>`s in addition to default `<slot>`, which is tucked inside a `<form>` element.\n\n## `<xin-field>`\n\n`<xin-field>` is a simple web-component with no shadowDOM that combines an `<input>` field wrapped with a `<label>`. Any\ncontent of the custom-element will become the `caption` or you can simply set the `caption` attribute.\n\nYou can replace the default `<input>` field by adding an element to the slot `input` (it's a `xinSlot`) whereupon\nthe `value` of that element will be used instead of the built-in `<input>`. (The `<input>` is retained and\nis used to drive form-validation.)\n\n`<xin-field>` supports the following attributes:\n\n- `caption` labels the field\n- `key` determines the form property the field will populate\n- `type` determines the data-type: '' | 'checkbox' | 'number' | 'range' | 'date' | 'text'\n- `optional` turns off the `required` attribute (fields are required by default)\n- `pattern` is an (optional) regex pattern\n- `placeholder` is an (optional) placeholder\n\nThe `text` type actually populates the `input` slot with a `<textarea>` element.",
    "title": "forms",
    "filename": "form.ts",
    "path": "src/form.ts"
  },
  {
    "text": "# gamepads\n\nA couple of utility functions for dealing with gamepads and XRInputs.\n\n`gamepadState()` gives you a condensed version of active gamepad state\n\n`gamepadText()` provides the above in minimal text form for debugging\n\n## XRInput Devices\n\n> This is experimental, the API is changing and stuff doesn't work. Hopefully it\n> will become a lot more generally useful once Apple's VisionPro comes out.\n\n`xrControllers(babylonjsXRHelper)` returns an `XinXRControllerMap` structure that tries to\nconveniently render the current state of XR controls. (The babylonjs API for this is horrific!)\n\n`xrControllerText(controllerMap)` renders the map output by the above in a compact form\nwhich is useful when debugging.",
    "title": "gamepads",
    "filename": "gamepad.ts",
    "path": "src/gamepad.ts"
  },
  {
    "text": "# icons\n\nA library that provides `ElementCreator` functions that produce SVG icons. It leverages `xinjs`'s\n`svgElements` proxy and is intended to address all the key use-cases for SVG icons in web\napplications along with being very easy to extend and maintain.\n\n## icons\n\n`icons` is a proxy that generates an `ElementCreator` for a given icon on demand,\ne.g. `icons.chevronDown()` produces an `<svg>` element containing a downward-pointing chevron\nicon with the class `icon-chevron-down`.\n\n```js\nconst { icons, svgIcon } = xinjsui\nconst { div } = xinjs.elements\n\npreview.append(...Object.keys(icons).sort().map(iconName => div(\n  { class: 'tile' },\n  svgIcon({icon: iconName, size: 16}),\n  div(iconName)\n)))\n```\n```css\n.preview {\n  display: flex;\n  flex-wrap: wrap;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  overflow: hidden scroll !important;\n}\n\n.preview svg {\n  fill: var(--text-color);\n}\n\n.preview .tile {\n  display: inline-block;\n  width: 160px;\n  text-align: center;\n  cursor: pointer;\n  background: #fff8;\n  padding: 10px;\n  border-radius: 5px;\n}\n\n.preview .tile:hover {\n  --text-color: var(--brand-color);\n}\n\n.preview .tile > div {\n  font-family: Menlo, Monaco, monospace;\n  whitespace: no-wrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 14px;\n  line-height: 1.5;\n}\n```\n\nThese icons are completely unstyled and can be colored using the css `fill` property. This will\nprobably be broken out as a standalone library to allow the use of whatever icons you like\n(its source data is currently generated from an [icomoon](https://icomoon.com/app)\n`selection.json` file, but could just as easily be generated from a directory full of SVGs).\n\n## Adding and redefining icons\n\n`defineIcon(name: string, icon: IconSpec | string)` adds or replaces your own icons\n\nThe simplest option is simply to pass the `path` attribute (if the icon has a single path) while more \ncomplex icons can be provide an `IconSpec` structure `{ p: string[]; w: number; h: number }` (specifying\nany number of paths and the size of the bounding box).\n\n> This will be extended to allow multi-colored icons (whose colors can still be overridden via CSS) in the future.\n\n## `<xin-icon>`\n\n`<xin-icon>` is a simple component that lets you embed icons as HTML. Check the CSS tab to see\nhow it's styled.\n\n`<xin-icon>` supports four attributes:\n\n- `size` (defaults to 0) if non-zero sets the height of the icon in pixels\n- `icon` is the name of the icon\n- `color` is the fill color (if you don't want to style it using CSS)\n- `stroke` is the stroke color\n- `stroke-width` (defaults to 1) is the width of the stroke assuming the icon's viewBox is 1024 units tall but the\n  icon is rendered at 32px (so it's multiplied by 32).\n\n> **Aside**: the tool used to build the icon library scales up the viewBox to 1024 tall and then rounds\n> all coordinates to nearest integer on the assumption that this is plenty precise enough for icons and\n> makes everything smaller and easier to compress.\n\n```html\n<xin-icon size=\"64\" icon=\"game\" color=\"var(--brand-color)\"></xin-icon>\n<xin-icon size=\"96\" icon=\"game\" color=\"yellow\" stroke=\"black\"></xin-icon>\n<xin-icon size=\"64\" icon=\"star\"\n color=\"linear-gradient(0deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n></xin-icon>\n<xin-icon size=\"64\" icon=\"star\"\n color=\"linear-gradient(345deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n></xin-icon>\n<xin-icon size=\"64\" icon=\"star\"\n color=\"linear-gradient(180deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n></xin-icon>\n<xin-icon size=\"64\" icon=\"star\"\n color=\"linear-gradient(90deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%)\"\n></xin-icon>\n```\n```css\nxin-icon.demo-2 > svg {\n  height: 96px;\n}\n```\n\n**CSS-to-SVG Gradient** support is work-in-progress and experimental (there seem to be \n…issues… with how SVG  gradients behave). The goal is to be able to use CSS gradients \nto generate SVG gradients (which are kind of a pain) on-the-fly. Use at your own risk.\n\n## SVGs as data-urls\n\n```js\nconst { elements } = xinjs\nconst { icons, svg2DataUrl } = xinjsui\n\npreview.append(\n  elements.span({\n    style: {\n      display: 'inline-block',\n      width: '120px',\n      height: '24px',\n      content: '\" \"',\n      background: svg2DataUrl(icons.star(), 'none', '#bbb', 3)\n    }\n  }),\n  elements.span({\n    style: {\n      display: 'inline-block',\n      width: '120px',\n      height: '24px',\n      content: '\" \"',\n      background: svg2DataUrl(icons.star(), 'gold', 'orange', 2)\n    }\n  }),\n)\n```\n\n`svg2DataUrl(svg: SVGElement, fill?: string, stroke?: string): string` is provided as a\nutility for converting SVG elements into data-urls (e.g. for incorporation into\nCSS properties. (It's used by the `<xin-3d>` component to render the XR widget.)\n\nIf you're using `SVGElement`s created using the `icons` proxy, you'll want to provide `fill` and/or\n`stroke` values, because images loaded via css properties cannot be styled.\n\n## Missing Icons\n\nIf you ask for an icon that isn't defined, the `icons` proxy will print a warning to console\nand render a `square` (in fact, `icons.square()`) as a fallback.\n\n## Why?\n\nThe motivation behind this is to avoid dealing with tooling issues that inevitably result from\nintegrating custom icon fonts or stylesheets needed by code libraries (and an icon-font also needs\na style-sheet. Importing code is simply easier (and as a bonus, more compact and flexible, and there's\nno question as to when the stuff is available).\n\nUntil I wrote this library, I had settled on icomoon.io's system for generating and maintaining\ncustom icon fonts for managing icons within a project, but this makes exporting UI elements\nwith icons in them fiddly, and I looked at other UI libraries and found similar issues.\n\nEven when just using this approach for projects over which I had full control, there were issues\nwith syncing icons with CSS (e.g. if you want to attach an element to a pseudo-element). `icons`\nin combination with `svg2DataUrl` solves all these problems.\n\nBasically, I wanted an icon solution that \"just works\" and this is it.\n\n> Multi-color icons are not yet supported, but it's on the list and the colors\n> will be overridable via styling.\n\nInternally, icons are stored as javascript path data.\n\nThese icons are mainly sourced from [feather](https://github.com/feathericons/feather), but\nall the icons have been processed to have integer coordinates in a `viewBox` typically scaled to 1024  &times; 1024.",
    "title": "icons",
    "filename": "icons.ts",
    "path": "src/icons.ts"
  },
  {
    "text": "# lottie / bodymovin\n\nA [lottie](https://airbnb.io/lottie/#/web) (a.k.a. **bodymovin**) player.\n\nIt's designed to work like an `<img>` element (just set its `src` attribute).\n\n```js\nconst { xinProxy } = xinjs\nconst { icons, popFloat } = xinjsui\nconst { div, label, input, select, option, span } = xinjs.elements\n\nconst rocket = preview.querySelector('xin-lottie')\nsetTimeout(\n  () => {\n preview.append(\n   popFloat({\n     content: [\n       { class: 'panel', drag: true },\n       div({ class: 'panel-header' }, 'Player Controls' ),\n       label(\n         { class: 'no-drag' },\n         'speed',\n         input({ type: 'range', min: -1, max: 1, step: 0.1, value: 0, onInput(event) {\n           const speed = Math.pow(5, Number(event.target.value))\n           rocket.animation.setSpeed(speed)\n           event.target.nextSibling.textContent = (speed * 100).toFixed(0) + '%'\n         } }),\n         span('100%', {style: { textAlign: 'right', width: '40px'}})\n       ),\n       label(\n         { class: 'no-drag' },\n         'direction',\n         select(\n           option('Forwards', {value: 1, selected: true}),\n           option('Backwards', {value: -1}),\n           {\n             onChange(event) {\n               rocket.animation.setDirection(event.target.value)\n             }\n           }\n         ),\n         icons.chevronDown(),\n       )\n     ],\n     target: rocket,\n     position: 's'\n   })\n )\n  },\n  500\n)\n```\n```html\n<xin-lottie\n  style=\"height: 100%; max-width: 100%\"\n  src=\"https://raw.githubusercontent.com/tonioloewald/xinjs-ui/main/demo/88140-rocket-livetrade.json\"\n></xin-lottie>\n<div class=\"caption\">\n  Animation by <a target=\"_blank\" href=\"https://lottiefiles.com/dvskjbicfc\">chiến lê hồng</a>\n</div>\n```\n```css\n.preview {\n  padding: var(--spacing);\n  text-align: center;\n}\n\n.preview .panel {\n  padding: 10px;\n  border-radius: 5px;\n  gap: 5px;\n  background: white;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.25);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.preview .caption {\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n}\n\n.preview .panel-header {\n  margin: 0;\n  text-align: center;\n  font-weight: bold;\n  background: var(--brand-color);\n  color: white;\n  padding: 5px;\n  margin: -10px -10px 0 -10px;\n  cursor: move;\n}\n```\n\nYou can also directly set its `json` property to the content of a `lottie.json` file.\n\nAnd of course just access the element's `animation` property to [use the bodymovin API](https://airbnb.io/lottie/#/web).\n\nAlso see the [documentation for advanced interactions](https://lottiefiles.github.io/lottie-docs/advanced_interactions/)",
    "title": "lottie / bodymovin",
    "filename": "bodymovin-player.ts",
    "path": "src/bodymovin-player.ts"
  },
  {
    "text": "# makeSorter\n\nI'm always confusing myself when writing sort functions, so I wrote `makeSorter()`. It's\ninsanely simple and just works™. It makes writing an array sort callback for anything\nother than an array of numbers or strings easier.\n\n```js\nconst { select, option, div, span, ul, li } = xinjs.elements\nconst { icons, makeSorter } = xinjsui\n\nconst people = [\n  { first: 'Frasier', last: 'Crane', age: 38 },\n  { first: 'Lilith', last: 'Crane', age: 37 },\n  { first: 'Rebecca', last: 'Howe', age: 35 },\n  { first: 'Woody', last: 'Boyd', age: 25 },\n  { first: 'Sam', last: 'Malone', age: 40 },\n  { first: 'Norm', last: 'Peterson', age: 38 },\n]\n\nconst sorters = {\n  firstSort: makeSorter(person => [person.first]),\n  firstDescSort: makeSorter(person => [person.first], false),\n  nameSort: makeSorter(person => [person.last, person.first]),\n  ageFirst: makeSorter(person => [-person.age, person.last]),\n  ageLast: makeSorter(person => [person.age, person.first], [true, false]),\n}\n\nfunction person({first, last, age}) {\n  return li(`${first} ${last}, ${age}`)\n}\n\nconst list = ul()\nsortPicker = select(\n  option('Sort by first', {value: 'firstSort'}),\n  option('Sort by first (desc)', {value: 'firstDescSort'}),\n  option('Sort by last, first', {value: 'nameSort'}),\n  option('Sort by age (desc), first', {value: 'ageFirst'}),\n  option('Sort by age, last (desc)', {value: 'ageLast'}),\n  {\n    onChange: render,\n    value: 'nameSort'\n  },\n)\n\nfunction render () {\n  list.textContent = ''\n  list.append(...people.sort(sorters[sortPicker.value]).map(person))\n}\n\npreview.append(\n  div(\n    sortPicker,\n    icons.chevronDown()\n  ),\n  list\n)\n\nrender()\n```\n```css\n.preview {\n  padding: var(--spacing);\n}\n\n.preview div {\n  position: absolute;\n  top: var(--spacing);\n  right: var(--spacing);\n}\n```\n\n## Details\n\nTo create a sort callback that sorts by propA then propB (if propA is tied):\n\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB]\n)\n```\n\nAs above, but sort descending:\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB],\n  false\n)\n```\n\nAs above but propA is sorted ascending, propB descending\n```\nconst sorter = makeSorter(\n  obj => [obj.propA, obj.propB],\n  [true, false]\n)\n```",
    "title": "makeSorter",
    "filename": "make-sorter.ts",
    "path": "src/make-sorter.ts"
  },
  {
    "text": "# map\n\nA [mapboxgl](https://docs.mapbox.com/mapbox-gl-js/api/) wrapper.\n\n```html\n<!-- please don't abuse my mapbox token -->\n<xin-map\n  style=\"width: 100%; height: 100%\"\n  coords=\"14.0093606,120.995083,17\"\n  token=\"pk.eyJ1IjoicG9kcGVyc29uIiwiYSI6ImNqc2JlbWU0bjA1ZmY0YW5ycHZod3VhbWcifQ.arvqfpOqMgFYkKgQ35UScA\"\n  map-style=\"mapbox://styles/mapbox/satellite-v9\"\n></xin-map>\n```\n\nThere's no need to learn new APIs or write wrappers, just access the element's `map` property\nand [use the standard mapbox APIs directly](https://docs.mapbox.com/).",
    "title": "map",
    "filename": "mapbox.ts",
    "path": "src/mapbox.ts"
  },
  {
    "text": "# markdown\n\n`<xin-md>` renders markdown using [marked](https://www.npmjs.com/package/marked).\n\n`<xin-md>` renders [markdown](https://www.markdownguide.org/) anywhere, either using the\n`src` attribute to load the file asynchronously, or rendering the text inside it.\n\n```html\n<xin-md>\n## hello\nworld\n</xin-md>\n```\n```css\nxin-md {\n  display: block;\n  padding: var(--spacing);\n}\n```\n\nNote that, by default, `<xin-md>` will use its `textContent` (not its `innerHTML`) as its source.\n\n## rendering markdown from a url\n\nAgain, like an `<img>` tag, you can simply set a `<xin-md>`'s `src` attribute to a URL pointing\nto markdown source and it will load it asynchronously and render it.\n\n```\n<xin-md src=\"/path/to/file.md\">\n```\n\n## setting its `value`\n\nOr, just set the element's `value` and it will render it for you. You can try\nthis in the console, e.g.\n\n```\n$('.preview xin-md').value = 'testing\\n\\n## this is a test'\n```\n\n## elements\n\n`<xin-md>` also (optionally) allows the embedding of inline HTML elements without blocking markdown\nrendering, so that you can embed specific elements while retaining markdown. You need to explicitly set\nthe `elements` property, and for markdown rendering not to be blocked, the html elements need to\nstart on a new line and not be indented. E.g.\n\n```html\n<xin-md elements>\n<form>\n### this is a form\n<label>\nfill in this field.\n**It's important!**\n<input>\n</label>\n</form>\n</xin-md>\n```\n\nIn this case `<xin-md>` uses its `innerHTML` and not its `textContent`.\n\n## context and template variables\n\n`<xin-md>` also supports **template** values. You need to provide data to the element in the form\nof `context` (an arbitrary object, or a JSON string), and then embed the template text using\nhandlebars-style doubled curly braces, e.g. `{{path.to.value}}`.\n\nIf no value is found, the original text is passed through.\n\nFinally, note that template substitution occurs *before* markdown transformation, which means you can\npass context data through to HTML elements.\n\n```html\n<xin-md\n  elements\n  context='{\"title\": \"template example\", \"foo\": {\"bar\": 17}, \"nested\": \"*work*: {{foo.bar}}\"}'\n>\n## {{title}}\n\nThe magic number is <input type=\"number\" value={{foo.bar}}>\n\nOh, and nested templates {{nested}}.\n</xin-md>\n```",
    "title": "markdown",
    "filename": "markdown-viewer.ts",
    "path": "src/markdown-viewer.ts"
  },
  {
    "text": "# menu\n\nBeing able to pop a menu up anywhere is just so nice, and `xinjs-ui` allows menus\nto be generated on-the-fly, and even supports hierarchical menus.\n\n```js\nconst { popMenu } = xinjsui\nconst { elements } = xinjs\n\npreview.addEventListener('click', (event) => {\n  if (!event.target.closest('button')) {\n    return\n  }\n  popMenu({\n    target: event.target,\n    menuItems: [\n      {\n        icon: 'thumbsUp',\n        caption: 'Like',\n        shortcut: '^L',\n        action() {\n          window.alert('I like it!')\n        }\n      },\n      null, // separator\n      {\n        icon: 'thumbsDown',\n        caption: 'dislike',\n        shortcut: '⌘D',\n        action() {\n          window.alert('Awwwww!')\n        }\n      },\n      {\n        icon: elements.span('🥹'),\n        caption: 'Also see…',\n        menuItems: [\n          {\n            icon: elements.span('😳'),\n            caption: 'And that’s not all…',\n            menuItems: [\n              {\n                icon: 'externalLink',\n                caption: 'timezones',\n                action: 'https://timezones.xinjs.net/'\n              },\n              {\n                icon: 'externalLink',\n                caption: 'b8rjs',\n                action: 'https://b8rjs.com'\n              },\n            ]\n          },\n          {\n            icon: 'xinjs',\n            caption: 'xinjs',\n            action: 'https://xinjs.net'\n          },\n          {\n            icon: 'xinie',\n            caption: 'xinie',\n            action: 'https://xinie.net'\n          },\n        ]\n      },\n      {\n        caption: 'Testing…',\n        menuItems: [\n          {\n            caption: 'one',\n            action () {\n              console.log('one')\n            }\n          },\n          {\n            caption: 'two',\n            action () {\n              console.log('two')\n            }\n          },\n          {\n            caption: 'three',\n            action () {\n              console.log('three')\n            }\n          }\n        ]\n      }\n    ]\n  })\n})\n```\n```html\n<button title=\"menu test\">\n  <xin-icon icon=\"moreVertical\"></xin-icon>\n</button>\n<button title=\"menu test from bottom-right\" style=\"position: absolute; bottom: 0; right: 0\">\n  <xin-icon icon=\"moreVertical\"></xin-icon>\n</button>\n```\n\n## Overflow test\n\n```js\nconst { popMenu, icons } = xinjsui\nconst { elements } = xinjs\n\npreview.querySelector('button').addEventListener('click', (event) => {\n  popMenu({\n    target: event.target,\n    menuItems:  Object.keys(icons).map(icon => ({\n      icon,\n      caption: icon,\n      action() {\n        console.log(caption)\n      }\n    }))\n  })\n})\n```\n```html\n<button title=\"big menu test\" style=\"position: absolute; top: 0; left: 0\">\n  Big Menu Test\n</button>\n```\n\n## popMenu({target, width, menuItems…})\n\n`popMenu` will spawn a menu on a target element. A menu is just a `MenuItem[]`.\n\n## MenuItem\n\nA `MenuItem` can be one of three things:\n\n- `null` denotes a separator\n- `MenuAction` denotes a labeled button or `<a>` tag based on whether the `action` provided\n  is a url (string) or an event handler (function).\n- `SubMenu` is a submenu.\n\n### MenuAction\n\nNote that popMenu does not implement shortcuts for you (yet!).\n\n```\ninterface MenuAction {\n  caption: string\n  shortcut?: string\n  enabled?: () => boolean\n  action: ActionCallback | string\n  icon?: string | Element\n}\n```\n\n### SubMenu\n\n```\ninterface SubMenu {\n  caption: string\n  enabled?: () => boolean\n  menuItems: MenuItem[]\n  icon?: string | Element\n}\n```\n\n## Why another menu library?!\n\nSupport for menus is sadly lacking in HTML, and unfortunately there's a huge conceptual problem\nwith menus implemented the way React and React-influenced libraries work, i.e. you need\nto have an instance of a menu \"wrapped around\" the DOM element that triggers it, whereas\na better approach (and one dating back at least as far as the original Mac UI) is to treat\na menu as a separate resource that can be instantiated on demand.\n\nA simple example where this becomes really obvious is if you want to associate a \"more options\"\nmenu with every row of a large table. Either you end up having an enormous DOM (virtual or otherwise)\nor you have to painfully swap out components on-the-fly.\n\nAnd, finally, submenus are darn useful for any serious app.\n\nFor this reason, `xinjs-ui` has its own menu implementation.",
    "title": "menu",
    "filename": "menu.ts",
    "path": "src/menu.ts"
  },
  {
    "text": "# notifications\n\n`XinNotification` provides a singleton custom `<xin-notification>` element that manages\na list of notifications.\n\nThe notifications are displayed most-recent first. If the notifications would take more than\nhalf the height of the display, they are scrolled.\n\nYou can post a notification simply with `XinNotification.post()` or `postNotification()`.\n\n```\ninterface NotificationSpec {\n  message: string\n  type?: 'info' | 'log' | 'warn' | 'error' // default 'info'\n  duration?: number\n  progress?: () => number // return percentage completion\n  close?: () => void\n}\n```\n\nIf you provide a `progress` callback (which is assumed to return a number from `0-100`, with\n100+ indicating completion) then `XinNotification` will poll it every second until the\ntask completes or the notification is closed. Returning 100 or more will automatically close\nthe notification.\n\nIf you configure a notification's `type = \"progress\"` but don't provide a `progress` callback\nthen an indefinite `<progress>` element will be displayed.\n\nIf you provide a `close` callback, it will be fired if the user closes the notification.\n\n```js\nconst { postNotification } = xinjsui\n\nconst form = preview.querySelector('xin-form')\nconst submit = preview.querySelector('.submit')\n\nform.onSubmit = (value, isValid) => {\n  if (!isValid) return\n  if (value.type === 'progress') {\n    startTime = Date.now()\n    const { message, duration } = value\n    postNotification({\n      message,\n      type: 'progress',\n      progress: () => (Date.now() - startTime) / (10 * duration),\n      close: () => { postNotification(`${value.message} cancelled`) },\n    })\n  } else {\n    postNotification(value)\n  }\n}\n\nsubmit.addEventListener('click', form.submit)\n\npostNotification({\n  message: 'Welcome to xinjs-ui notifications, this message will disappear in 2s',\n  duration: 2\n})\n```\n```html\n<xin-form>\n  <h3 slot=\"header\">Notification Test</h3>\n  <xin-field caption=\"Message\" key=\"message\" type=\"string\" value=\"This is a test…\"></xin-field>\n  <xin-field caption=\"Type\" key=\"type\" value=\"info\">\n    <xin-select slot=\"input\"\n      options=\"error,warn,info,success,log,,progress\"\n    ></xin-select>\n  </xin-field>\n  <xin-field caption=\"Duration\" key=\"duration\" type=\"number\" value=\"2\"></xin-field>\n  <button slot=\"footer\" class=\"submit\">Post Notification</button>\n</xin-form>\n```\n```css\nxin-form {\n  margin: 10px;\n  display: block;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\nxin-form::part(content) {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  gap: 10px;\n  background: var(--background);\n}\n\nxin-form::part(header),\nxin-form::part(footer) {\n  background: #eee;\n  justify-content: center;\n  padding: 10px;\n}\n\nxin-form h3 {\n  margin: 0;\n}\n\nxin-form label {\n  display: grid;\n  grid-template-columns: 120px 1fr;\n}\n```\n\n## `postNotification(spec: NotificationSpec | string)`\n\nThis is simply a wrapper for `XinNotification.post()`.",
    "title": "notifications",
    "filename": "notifications.ts",
    "path": "src/notifications.ts"
  },
  {
    "text": "# popFloat\n\nThere are so many cases in user-interfaces where it's useful to pop-up a floating\nuser interface element that a simple and reliable way of doing this seems like\na good idea.\n\nThe problem with many such approaches is that they assume a highly specific\nuse-case (e.g. popup menu or combo box) and while meeting the creator's intended\npurpose admirably, turn out to have some annoying limitation that prevents them\nhandling the specific case at hand.\n\n```js\nconst { popFloat, positionFloat } = xinjsui\nconst { button } = xinjs.elements\nconst grid = preview.querySelector('.grid')\n\ngrid.addEventListener('click', (event) => {\n  const { target } = event\n  if (!target.closest('button')) {\n    return\n  }\n  const float = preview.querySelector('xin-float')\n  if (float === null) {\n    // create and position a float\n    preview.append(\n      popFloat({\n        content: [\n          'hello, I am a float',\n          button('close me', {\n            onClick(event){\n              event.target.closest('xin-float').remove()\n            }\n          })\n        ],\n        target,\n        position: target.dataset.float\n      })\n    )\n  } else {\n    // position an existing float\n    positionFloat(float, target, target.dataset.float)\n  }\n})\n```\n```html\n<h2>Pop Float Demo</h2>\n<div class=\"grid\">\n  <button data-float=\"nw\">nw</button>\n  <button data-float=\"n\">n</button>\n  <button data-float=\"ne\">ne</button>\n  <button data-float=\"wn\">wn</button>\n  <span>&nbsp;</span>\n  <button data-float=\"en\">en</button>\n  <button data-float=\"w\">w</button>\n  <button data-float=\"auto\">auto</button>\n  <button data-float=\"e\">e</button>\n  <button data-float=\"ws\">ws</button>\n  <button data-float=\"side\">side</button>\n  <button data-float=\"es\">es</button>\n  <button data-float=\"sw\">sw</button>\n  <button data-float=\"s\">s</button>\n  <button data-float=\"se\">se</button>\n</div>\n```\n```css\n.preview .grid {\n  display: grid;\n  grid-template-columns: 80px 80px 80px;\n}\n\n.preview xin-float {\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  padding: 10px;\n  background: white;\n  box-shadow: 2px 10px 5px #0004;\n}\n```\n\n## popFloat\n\n```\nexport interface PopFloatOptions {\n  content: HTMLElement | ElementPart[]\n  target: HTMLElement\n  position?: FloatPosition\n}\n\nexport const popFloat = (options: PopFloatOptions): XinFloat\n```\n\nCreate a `<xin-float>` with the content provided, positioned as specified (or automatically).\n\n## positionFloat\n\n```\nexport const positionFloat = (\n  element: HTMLElement,\n  target: HTMLElement,\n  position?: FloatPosition\n  remainOnScroll?: 'hide' | 'remove' | boolean // default is 'remove'\n  remainOnResize?: 'hide' | 'remove' | boolean // default is 'remove'\n): void\n```\n\nThis allows you to, for example, provide a global menu that can be used on any element\ninstead of needing to have a whole instance of the menu wrapped around every instance\nof the thing you want the menu to affect (a common anti-pattern of front-end frameworks).\n\n### Handling Overflow\n\n`positionFloat` automatically sets two css-variables `--max-height` and `--max-width` on\nthe floating element to help you deal with overflow (e.g. in menus). E.g. if the float\nis positioned with `top: 125px` then it will set `--max-height: calc(100vh - 125px)`.\n\n## FloatPosition\n\n```\nexport type FloatPosition =\n| 'n'\n| 's'\n| 'e'\n| 'w'\n| 'ne'\n| 'nw'\n| 'se'\n| 'sw'\n| 'en'\n| 'wn'\n| 'es'\n| 'ws'\n| 'side'\n| 'auto'\n```",
    "title": "popFloat",
    "filename": "pop-float.ts",
    "path": "src/pop-float.ts"
  },
  {
    "text": "# rating\n\n`XinRating` / `<xin-rating>` provides a drop-in replacement for an `<input>`\nthat renders a rating using <xin-icon icon=\"star\" color=\"red\"></xin-icon>s.\n\n```html\n<xin-rating value=3.4></xin-rating>\n<xin-rating min=0 value=3.4 step=0.5 hollow></xin-rating>\n<xin-rating value=3.4 color=\"deepskyblue\"></xin-rating>\n<xin-rating value=3.1 max=10 color=\"hotpink\" icon=\"heart\" icon-size=32></xin-rating>\n```\n```css\n.preview {\n  display: flex;\n  flex-direction: column;\n}\n```\n\n## Attributes\n\n- `icon-size` (24 by default) determines the height of the control and along with `max` its width\n- `max` maximum rating\n- `min` (1 by default) can be 0 or 1 (allowing ratings of 0 to max or 1 to max)\n- `step` (0.5 by default) granularity of rating\n- `icon` ('star' by default) determines the icon used\n- `fill` (#f91 by default) is the color of rating icons\n- `empty-color` (#ccc by default) is the color of background icons\n- `readonly` (false by default) prevents the user from changing the rating\n- `hollow` (false by default) makes the empty rating icons hollow.\n\n## Keyboard\n\n`<xin-rating>` should be fully keyboard navigable (and, I hope, accessible).\n\nThe up key increases the rating, down descreases it. This is the same\nas the behavior of `<input type=\"number\">`, [Shoelace's rating widget](https://shoelace.style/components/rating/), \nand (in my opinion) common sense, but  not like [MUI's rating widget](https://mui.com/material-ui/react-rating/).",
    "title": "rating",
    "filename": "rating.ts",
    "path": "src/rating.ts"
  },
  {
    "text": "# scriptTag & styleSheet\n\n## scriptTag\n\nIf you need to load an old school (cjs) javascript or css library via cdn then use these two functions.\n\n`xinjs-ui` uses this library to implement the `<xin-code>`, `<xin-lottie>`, and `<xin-map>`\nelements.\n\n`scriptTag()` and `styleSheet()` return promises that resolve `globalThis` when the module in question\nhas loaded and otherwise behave as much like `import()` as possible.\n\nUsing `scriptTag`:\n\n```html\n<!-- inline styles needed because chart.js overrides stylesheet -->\n<canvas style=\"height: 100%; width: 100%\"></canvas>\n```\n```js\nconst { scriptTag } = xinjsui\n\n// Note that the current version of Chart.js is an ES6 module so you could just use `import()` instead\nconst { Chart } = await scriptTag('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js')\nconst data = {\n  labels: ['first', 'second', 'third'],\n  datasets: [\n    {\n      label: 'amazingness',\n      backgroundColor: '#fff4',\n      borderColor: '#f008',\n      borderWidth: 2,\n      data: [21, 27, 57]\n    }\n  ]\n}\nconst options = {\n  scales: {\n    yAxes:[{\n      stacked:true,\n      gridLines: {\n        display:true,\n        color: '#00f2'\n      }\n    }],\n    xAxes:[{\n      gridLines: {\n        display:false\n      }\n    }]\n  }\n}\n\nChart.Bar(preview.querySelector('canvas'), {data, options})\n```\n\nNote that `scriptTag` will resolve `globalThis` so it behaves as much like async `import()`\nas possible.\n\nAs an aside:\n\n`<xin-lottie>` is implemented in such a way that if you've preloaded the module\n(e.g. via a script tag or packaging) it won't load it again, which affords offline\nuse.\n\nThere's no point for `<xin-map>` since it won't work without connectivity anyway.\n\n## styleSheet\n\nstyleSheet creates a `<link>` tag for a specified css file.\n\nUsing `styleSheet`:\n\n    styleSheet('../path/to/style.css')\n\nThis is awaitable, if you care. The stylesheet `<link>` will only be inserted _once_.",
    "title": "scriptTag & styleSheet",
    "filename": "via-tag.ts",
    "path": "src/via-tag.ts"
  },
  {
    "text": "# select\n\n`<xin-select>` (`xinSelect` is the `ElementCreator`) is a replacement for the lamentable\nbuilt in `<select>` element that addresses its various shortcomings.\n\n- since `<xin-select>` is powered by `popMenu`, it supports separators.\n- it will retain and display a value even if the matching option is missing.\n- its displayed value can be made `editable` allowing use as a \"combo box\".\n- options can have icons.\n- options can have callbacks (e.g. an \"Other…\" that launches a dialog)\n- picking an item triggers an `action` event even if the value hasn't changed.\n\n```html\n<xin-select\n  title=\"simple select\"\n  options=\"this,that,,the other\"\n  value=\"not an option!\"\n></xin-select><br>\n<xin-select\n  title=\"combo select\"\n  class=\"icons\"\n  editable\n  placeholder=\"pick an icon\"\n></xin-select>\n```\n```js\nconst { icons } = xinjsui\n\nconst iconsSelect = preview.querySelector('.icons')\n\niconsSelect.options = Object.keys(icons).sort().map(icon =>({\n  icon,\n  caption: icon,\n  value: icon\n}))\n\niconsSelect.addEventListener('action', event => console.log(event))\niconsSelect.addEventListener('change', event => console.log(event))\n```\n\n## `options`\n\n    export interface SelectOption {\n      icon?: string | HTMLElement\n      caption: string\n      value: string | OptionRequest\n    }\n\n    type OptionRequest = () => string\n\n    export type SelectOptions = (string | null | SelectOption)[]\n\nA `<xin-select>` can be assigned `options` as a string of comma-delimited choices,\nor be provided with an array of options.\n\n## Events\n\nPicking an option triggers an `action` event (whether or not this changes the value).\n\nChanging the value, either by typing in an editable `<xin-select>` or picking a new\nvalue triggers a `change` event.\n\nYou can look at the console to see the events triggered by the second example.",
    "title": "select",
    "filename": "select.ts",
    "path": "src/select.ts"
  },
  {
    "text": "# sidebar\n\nThe default layout for iOS / iPadOS apps is to hide the sidebar when displaying content on small\nscreens, and display the sidebar when space is available (with the user able to explicitly hide\nthe sidebar if so desired). `<xin-sidenav>` provides this functionality.\n\n`<xin-sidenav>` is used to handle the layout of the documentation tab panel.\n\n`<xin-sidenav>`'s behavior is controlled by two attributes, `minSize` is the point at which it will toggle between showing the navigation\nsidebar and content, while `navSize` is the width of the sidebar. You can interrogate its `compact` property to find out if it's\ncurrently in `compact` form.",
    "title": "sidebar",
    "filename": "side-nav.ts",
    "path": "src/side-nav.ts"
  },
  {
    "text": "# size-break\n\nWhile we wait for enough browsers to implement [container-queries](https://www.w3.org/TR/css-contain-3/),\nand in any event when you simply want to do different things at different sizes (e.g. in the project I'm\nworking on right now, a row of buttons turns into a menu at narrow widths) there's `<xin-sizebreak>`.\n\nNote that the sizes referred to are of the `<xin-sizebreak>`'s `.offsetParent`, and it watches for\nthe window's `resize` events and its own (via `ResizeObserver`).\n\n```html\n<div class=\"container\">\n  <xin-sizebreak min-width=\"300\" min-height=\"150\">\n    <h1>BIG!</h1>\n    <i slot=\"small\">little</i>\n  </xin-sizebreak>\n  <xin-sizer></xin-sizer>\n</div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.preview xin-sizebreak {\n  width: 100%;\n  height: 100%;\n  background: #fff8;\n  border: 1px solid #aaa;\n}\n\n.preview xin-sizebreak * {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n.preview .container {\n  position: relative;\n  min-width: 100px;\n  min-height: 40px;\n  max-height: 100%;\n  width: 400px;\n  height: 100px;\n}\n\n.preview .sizer {\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  line-height: 24px;\n  text-align: center;\n  background: #0002;\n  bottom: 0;\n  right: 0;\n  cursor: nwse-resize;\n  opacity: 0.5;\n}\n\n.preview .sizer:hover {\n  opacity: 1.0;\n}\n```\n\n`<xin-sizebreak>` supports both `min-width` and/or `min-height`, and you can of course target only one\nof the slots if you like. The demo site uses them to hide the [bundlejs](https://bundlejs.com/) badge when\nspace is tight.",
    "title": "size-break",
    "filename": "size-break.ts",
    "path": "src/size-break.ts"
  },
  {
    "text": "# sizer\n\nThis is a super-simple component that you can put in a fixed size element allowing it to be resized\nfrom the bottom-right.\n\n```html\n<div>\n  <xin-sizer></xin-sizer>\n</div>\n```\n```css\n.preview div {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  width: 200px;\n  height: 100px;\n  background: #ff02;\n  border: 1px solid #555;\n}\n```",
    "title": "sizer",
    "filename": "sizer.ts",
    "path": "src/sizer.ts"
  },
  {
    "text": "# table\n\nA virtual data-table, configurable via a `columns` array (which will automatically be generated if not provided),\nthat displays gigantic tables with fixed headers (and live column-resizing) using a minimum of resources and cpu.\n\n```js\nconst { dataTable } = xinjsui\nconst { input } = xinjs.elements\n\nconst emojiRequest = await fetch('https://raw.githubusercontent.com/tonioloewald/emoji-metadata/master/emoji-metadata.json')\nconst emojiData = await emojiRequest.json()\n\nconst columns = [\n  {\n    name: \"emoji\",\n    prop: \"chars\",\n    align: \"center\",\n    width: 80\n  },\n  {\n    prop: \"name\",\n    width: 300,\n    // custom cell using xinjs bindings to make the field editable\n    dataCell() {\n      return input({\n        class: 'td',\n        bindValue: '^.name',\n        title: 'name',\n        onMouseup: (event) => { event.stopPropagation() },\n        onTouchend: (event) => { event.stopPropagation() },\n      })\n    },\n  },\n  {\n    prop: \"category\",\n    width: 150\n  },\n  {\n    prop: \"subcategory\",\n    width: 150\n  },\n]\n\npreview.append(dataTable({ multiple: true, array: emojiData, columns }))\n```\n```css\n.preview input.td {\n  margin: 0;\n  border-radius: 0;\n  box-shadow: none !important;\n  background: #fff4;\n}\n\n.preview xin-table {\n  height: 100%;\n}\n```\n\n> In the preceding example, the `name` column is *editable* (and *bound*, try editing something and scrolling\n> it out of view and back) and `multiple` select is enabled. In the console, you can try `$('xin-table').visibleRows`\n> and $('xin-table').selectedRows`.\n\nYou can set the `<xin-table>`'s `array`, `columns`, and `filter` properties directly, or set its `value` to:\n\n```\n{\n  array: any[],\n  columns: ColumnOptions[] | null,\n  filter?: ArrayFilter\n}\n```\n\n## selection\n\n`<xin-table>` supports `select` and `multiple` boolean properties allowing rows to be selectable. Selected rows will\nbe given the `[aria-selected]` attribute, so style them as you wish.\n\n`multiple` select supports shift-clicking and command/meta-clicking.\n\n`<xin-table>` provides an `selectionChanged(visibleSelectedRows: any[]): void` callback property allowing you to respond to changes\nin the selection, and also `selectedRows` and `visibleSelectedRows` properties.\n\nThe following methods are also provided:\n\n- `<xin-table>.selectRow(row: any, select = true)` (de)selects specified row\n- `<xin-table>.selectRows(rows?: any[], select = true)` (de)selects specified rows\n- `<xin-table>.deSelect(rows?: any[])` deselects all or specified rows.\n\nThese are rather fine-grained but they're used internally by the selection code so they may as well be documented.\n\n## rowHeight\n\nThis property dictates the height of each row. It defaults to `30` (px).\n\nIf you set the `<xin-table>`'s `rowHeight` to `0` it will render all its elements (i.e. not be virtual). This is\nuseful for smaller tables, or tables with variable row-heights.",
    "title": "table",
    "filename": "data-table.ts",
    "path": "src/data-table.ts"
  },
  {
    "text": "# tabs\n\n`<xin-tabs>` creates a `tabpanel` for its children, creating a `tab` for each based on its\n`name` attribute.\n\n```js\n[...preview.querySelectorAll('div[name]')].forEach(div => {\n  div.style.color = `hsl(${(Math.random() * 360).toFixed(0)} 50% 50%)`\n})\n\nconst { div, button } = xinjs.elements\nconst tabSelector = preview.querySelector('xin-tabs')\n\nlet bodycount = 0\npreview.querySelector('.add').addEventListener('click', () => {\n  const name = `new tab ${++bodycount}`\n  const body = div(\n    {name, dataClose: true},\n    name,\n  )\n  tabSelector.addTabBody(body, true)\n})\n```\n```html\n<xin-tabs>\n  <div name=\"first\">first body</div>\n  <div name=\"second\" data-close>\n    <template role=\"tab\">\n      <xin-icon\n        style=\"\n          display: inline-block;\n          width: 16px;\n          height: 16px;\n          transform: translateY(2px);\n          margin-right: 4px;\n          fill: var(--brand-color);\n        \"\n        icon=\"eye\"\n      ></xin-icon>\n      <span>Ooooh!!!</span>\n    </template>\n    look at the html…\n  </div>\n  <div name=\"third\">third body</div>\n  <button class=\"add\" slot=\"after-tabs\">\n    <xin-icon icon=\"plus\"></xin-icon>\n  </button>\n</xin-tabs>\n```\n```css\n  .preview xin-tabs {\n    height: 100%;\n  }\n\n  .preview div[name] {\n    padding: 20px;\n    text-align: center;\n    height: 100%;\n    font-size: 200%;\n  }\n```\n\nThe `<xin-tabs>`s `value` is the index of its active body.\n\nA `<xin-tabs>` has `addTabBody(body: HTMLElement, select?: boolean)` and\n`removeTabBody(body: number | HTMLElement)` methods for updating its content.\n\n## Custom Tab Content\n\nYou can specify the exact content of the tab for a given body by\nadding a `<template role=\"tab\">` to that body. The contents of that\ntemplate will be cloned into the tab.",
    "title": "tabs",
    "filename": "tab-selector.ts",
    "path": "src/tab-selector.ts"
  },
  {
    "text": "# tag-list\n\nBuilding a tag-list from standard HTML elements is a bit of a nightmare.\n\n`<xin-tag-list>` allows you to display an editable or read-only tag list (represented either\nas a comma-delimited string or an array of strings).\n\n```html\n<b>Display Only</b>\n<xin-tag-list\n  value=\"this,that,,the-other\"\n></xin-tag-list>\n<xin-tag-list\n  class=\"compact\"\n  value=\"this,that,,the-other\"\n></xin-tag-list>\n<br>\n<b>Editable</b>\n<xin-tag-list\n  value=\"belongs,also belongs,custom\"\n  editable\n  available-tags=\"belongs,also belongs,not initially chosen\"\n></xin-tag-list>\n\n<br>\n<b>Text-Entry</b>\n<xin-tag-list\n  value=\"this,that,the-other,not,enough,space\"\n  editable\n  text-entry\n  available-tags=\"tomasina,dick,,harriet\"\n></xin-tag-list>\n```\n```css\n.preview .compact {\n  --spacing: 8px;\n  --font-size: 12px;\n  --line-height: 18px;\n}\n```\n\n## Properties\n\n### `value`: string | string[]\n\nA list of tags\n\n### `tags`: string[]\n\nA read-only property giving the value as an array.\n\n### `available-tags`: string | string[]\n\nA list of tags that will be displayed in the popup menu by default. The popup menu\nwill always display custom tags (allowing their removal).\n\n### `editable`: boolean\n\nAllows the tag list to be modified via menu and removing tags.\n\n### `text-entry`: boolean\n\nIf `editable`, an input field is provided for entering tags directly.\n\n### `placeholder`: string = 'enter tags'\n\nPlaceholder shown on input field.",
    "title": "tag-list",
    "filename": "tag-list.ts",
    "path": "src/tag-list.ts"
  },
  {
    "text": "# trackDrag\n\nSometimes you want to track a mouse-drag or touch-drag operation without messing around.\nThis is how the resizeable columns in `<xin-table>` work.\n\nJust call `trackDrag(event, (dx, dy, event) => { ... })` and you'll get updates on corresponding events until\nyou return `true` from the event-handler (or, in the case of `touch` events, the last `touch` ends).\nFor mouse events, a \"tracker\" element is thrown up in front of everything for the event.\n\n```html\n<p>\n  Try dragging the squares…<br>\n  (You can drag them separately with multi-touch!)\n</p>\n<div class=\"draggable\" style=\"top: 20px; left: 40px; background: #f008\"></div>\n<div class=\"draggable\" style=\"left: 40%; bottom: 30%; background: #0f08\"></div>\n<div class=\"draggable\" style=\"bottom: 30px; right: 10px; background: #00f8\"></div>\n```\n```css\n.preview {\n  touch-action: none;\n}\n\n.draggable {\n  content: ' ';\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  cursor: move;\n}\n\n.preview p {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n```\n```js\nconst { trackDrag } = xinjsui\n\nfunction dragItem(event) {\n  const draggable = event.target\n  if (draggable.classList.contains('draggable')) {\n    const x = draggable.offsetLeft\n    const y = draggable.offsetTop\n    trackDrag(event, (dx, dy, event) => {\n      draggable.style.left = (x + dx) + 'px'\n      draggable.style.top = (y + dy) + 'px'\n      draggable.style.bottom = 'auto'\n      draggable.style.right = 'auto'\n      return event.type === 'mouseup'\n    })\n  }\n}\n\npreview.addEventListener('mousedown', dragItem )\npreview.addEventListener('touchstart', dragItem, { passive: true } )\n```\n\nFor `touch` events, `dx` and `dy` are based on tracking `event.changedTouches[0]` which\nis almost certainly what you want.\n\nTo handle multi-touch gestures you will need to track the touches yourself.\n\n## bringToFront\n\n`bringToFront(element: HTMLElement, selector = 'body *')`  gives the element the highest\n`z-index` of any element matching the selector (which is passed to findHighestZ).\n\n## findHighestZ\n\n`findHighestZ(selector = 'body *'): number` returns the the highest `z-index` of any element\nmatching `selector`.",
    "title": "trackDrag",
    "filename": "track-drag.ts",
    "path": "src/track-drag.ts"
  },
  {
    "text": "# word (rich text editor)\n\n`<xin-word>` is a simple and easily extensible `document.execCommand` WYSIWYG editor with some conveniences.\n\n```html\n<xin-word widgets=\"minimal\">\n<h3>Heading</h3>\n<p>And some <b>text</b></p>\n</xin-word>\n```\n```css\nxin-word {\n  background: white;\n}\n\nxin-word [part=\"toolbar\"] {\n  background: #f8f8f8;\n}\n\nxin-word [part=\"doc\"] {\n  padding: 20px;\n}\n```\n\nBy default, `<xin-word>` treats its initial contents as its document, but you can also set (and get)\nits `value`.\n\n## toolbar\n\n`<xin-word>` elements have a `toolbar` slot (actually a xin-slot because it doesn't use\nthe shadowDOM).\n\nIf you set the `widgets` attribute to `default` or `minimal` you will get a toolbar\nfor free. Or you can add your own custom widgets.\n\n## helper functions\n\nA number of helper functions are available, including:\n\n- `commandButton(title: string, command: string, iconClass: string)`\n- `blockStyle(options: Array<{caption: string, tagType: string}>)`\n- `spacer(width = '10px')`\n- `elastic(width = '10px')`\n\nThese each create a toolbar widget. A `blockStyle`-generated `<select>` element will\nautomatically have its value changed based on the current selection.\n\n## properties\n\nA `<xin-word>` element also has `selectedText` and `selectedBlocks` properties, allowing\nyou to easily perform operations on text selections, and a `selectionChange` callback (which\nsimply passes through document `selectionchange` events, but also passes a reference to\nthe `<xin-word>` component).",
    "title": "word (rich text editor)",
    "filename": "rich-text.ts",
    "path": "src/rich-text.ts"
  },
  {
    "text": "# docs.js\n\nThe `xinjs-ui` package includes `docs.js` which is used to build the documentation\nfor the [ui.xinjs.net](https://ui.xinjs.net).\n\nThis is a simple utility for finding all the markdown files in a directory and also all\nmulti-line comments in .ts, .js, and .css source files that being with a \"!\".\n\nThese comments are assumed to be in markdown.\n\nIt then emits JSON containing all the content.\n\nComments comprising JSON objects are treated as metadata and added to the\nfile objects in the JSON data. This includes: `<!--{ ... }-- >` and `/*{...}* /`\ncomments (omit the spaces inserted to prevent this text from blowing up docs.js!)\n\nAs of now, the only metadata supported by docs.js is `pin` which if set to \"top\"\nwill force the item to the top of the list, while \"bottom\" will force it to the\nbottom.\n\nThis doc is pinned to the bottom. README is pinned to the top.\n\n> **Aside**: the original version of this code was written by ChatGPT.",
    "title": "docs.js",
    "filename": "docs.js",
    "path": "docs.js",
    "pin": "bottom"
  },
  {
    "text": "# Work in Progress\n\n- Convert the various menu components as `<xin-menu>`, `<xin-menu-item>`, `<xin-menu-divider>`\n- `<xin-filter>`\n  - Leverage `<xin-select>` for picking fields etc.\n  - Leverage `<xin-tag-list>` for displaying filters compactly\n  - Leverage `popFloat` for disclosing filter-editor\n- `<xin-editable>`\n  - Add support for disabling / enabling options\n  - Hide lock icons while resizing\n  - Maybe show lines under locks indicating the parent\n  - Support snapping to sibling boundaries and centers\n- builds\n  - better leveraging of tree-shacking?\n  - pass xinjs thru?\n  - or do we need to import xinjs components through xinjs to avoid dynamic import issues?\n  <!--{\"pin\": \"bottom\"}-->\n",
    "title": "Work in Progress",
    "filename": "TODO.md",
    "path": "TODO.md",
    "pin": "bottom"
  }
]

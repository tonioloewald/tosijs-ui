[
  {
    "text": "# test\n\nThis is a test!\n",
    "filename": "test.md",
    "path": "documentation/test.md"
  },
  {
    "text": "# xinjs-ui\n\n[xinjs](https://xinjs.net) [discord](https://discord.gg/ramJ9rgky5) [github](https://github.com/tonioloewald/xinjs-ui#readme) [npm](https://www.npmjs.com/package/xinjs-ui) <size-break min-width=\"500\"><img alt=\"bundlejs\" src=\"https://deno.bundlejs.com/?q=xinjs-ui&badge=\"></size-break>\n\nCopyright ©2023 Tonio Loewald\n\n## the xinjs ui library\n\nIn general, `xinjs` strives to work _with_ the browser rather than trying to _replace_ it.\n\nIn a similar vein, `xinjs-ui` comprises a collection of [web-components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)\nwith the goal of augmenting what _already_ works well, and the components should be interoperable as\npossible with the stuff you already use as possible. E.g. where appropriate, the `value` of an\nelement is its malleable `state`, and when this changes, the element emits a\n`change` event.\n\nSimilarly, the xinjs base `Component` class and the components in this collection stive to\nbe as similar in operation as possible to DOM elements as possible. E.g. binary attrbutes\nwork as expected. Intinsic properties of components will default to `null` rather than `undefined`.\n\nSimilarly, because web-components are highly interoperable, there's no reason to reinvent\nwheels. In particular, this library won't try to replace existing, excellent libraries\nsuch as [shoelace.style](https://shoelace.style/) or wrap perfectly functional HTML\nelements, like the venerable `<input>` or `<form>` elements that are already capable\nand accessible.\n\nThe goal here is to provide useful components and other utilities that add to what's built into HTML5 and CSS3.\n\n## custom elements\n\n### `<bodymovin-player>`\n\nA wrapper for AirBnb's bodymovin, a.k.a. [lottie](https://airbnb.io/lottie/#/web), player.\n\n    <bodymovin-player src=\"path/to/lottie.json\"></bodymovin-player>\n\nOr you can directly set its `json` property to the content of a `lottie.json` file.\n\nAnd of course just access the element's `animation` property to use the usual APIs.\n\n### `<data-table>`\n\nA virtual data-table, configurable via a `columns` array (which will automatically be generated if not provided),\nthat displays gigantic tables with fixed headers (and live column-resizing) using a minimum of resources and cpu.\n\nYou can set the `<data-table>`'s `value` to `{ array: any[], columns: ColumnOptions[] | null, filter?: ArrayFilter }`\n\nIf you set the `<data-table>`'s `rowHeight` to `0` it will render all its elements (i.e. not be virtual). This is\nuseful for smaller tables, or tables with variable row-heights.\n\n### `<code-editor>`\n\nSometimes, it's nice to be able to just toss a code-editor in a web-page. The element's `value` is\nthe code.\n\n### `<filter-builder>`\n\nAutomatically creates `ArrayFilter` functions `(a: any[]) => any[]` based on a text query that accepts the\nfollowing space-delimited criteria — all text matches are performed in `LocaleLowerCase`.\n\n`<filter-builder>` has sets its `filter` property to an `ArrayFilter`, by default it just passes through\nthe array untouched. Its `value` is the source `string`.\n\nThe filter-builder has a default set of `FilterMaker` objects which it uses to **curry** an filter function.\n\n    type ObjectTest (obj: any) => boolean\n\n    interface FilterMaker {\n      hint: string                                    // describes the grammar\n      description: (...matches: string[]) => string   // describes the actual filter\n      token: RegExp                                   // matches the token\n      filterMaker(...matches: string) => ObjectTest   // builds an ObjectTest\n    }\n\nThe `<filter-builder>` will use the `hint` values to write its `placeholder` (you can override this if\nyou explicitly set the `placeholder`) and it will use the `description` function to create the\n`title` attribute, describing the filter.\n\nThe default `filters` provided are (in priority order):\n\n- `[field]=value` if `field` is specified, matches `value`, otherwise looks for `value` anwhere\n- `field!=value` matches if `field` is not `value`\n- `field>value` / `field<value` - matches if `field` is `>`/`<` `value`, if `isNaN(Number(value))` this will\n  be an alphabetical order comparison, otherwise it will be numberic.\n- `field:value` matches if `field` contains `value`\n- `!!field` matches if `field` is **truthy**\n- `!field` matches if `field` is **falsy** (e.g. `''`, `null`, `undefined`, `false`, `0`)\n- `value` matches if any field contains `value`\n\nRight now multiple criteria are `AND`ed together. This will be extended to allow `()`, `OR`, `<` and `>` comparisons will\nbecome smarter (convert both sides to numbers if possible), and extensibility will be added.\n\n### `<map-box>`\n\nA [mapboxgl](https://docs.mapbox.com/mapbox-gl-js/api/) wrapper.\n\n    <map-box coords=\"21.4389,-158.0001,9\" token=\"your-mapbox-token-goes-here\"></map-box>\n\nThere's no need to learn new apis, just access the element's `map` property.\n\n### `<markdown-viewer>`\n\nRender [markdown](https://www.markdownguide.org/) anywhere, either using the `src` attribute to load\nthe file asynchronousely, or just put the text inside it. Powered by [marked](https://www.npmjs.com/package/marked).\n\n    <markdown-viewer src=\"/path/to/file.md\">\n\nOr (but don't include the indentation!!):\n\n    <markdown-viewer>\n      # hello\n      world\n    </markdown-viewer>\n\nAnd just set the element's `value` and it will render it for you.\n\n### `<rich-text>`\n\nA simple and easily extensible `document.execCommand` WYSIWYG editor with some conveniences.\n\nBy default, it treats its initial contents as its document, but you can also set (and get)\nits `value`.\n\nIt has a `toolbar` slot (actually a xin-slot because it doesn't use the shadowDOM).\n\nA `<button>` element in the toolbar simply needs a `data-command` attribute and it\nwill fire `document.execCommand`. You can add extra parameters (the second parameter is\nadded as `false` automatically) using commas, e.g. `data-command=\"formatBlock,H2\"` will\ntrigger `document.execCommand('formatBlock', false, 'H2')`.\n\n`<select>` elements are also supported, just put the same string in the `<option>` elements'\n`value` property.\n\nObviously, you can just implement your own widgets and do anything you want.\n\nThe `<rich-text>` component provides `selectedText` and `selectedBlocks` properties, allowing\nyou to easily perform operations on text selections, and a `selectionChange` callback (which\nsimply passes through document `selectionchange` events, but also passes a reference to\nthe `<rich-text>` component).\n\n### `<side-nav>`\n\nThe default layout for iOS / iPadOS apps is to hide the sidebar when displaying content on small\nscreens, and display the sidebar when space is available (with the user able to explicitly hide\nthe sidebar if so desired). `<side-nav>` provides this functionality.\n\n### `<size-break>`\n\nWhile we wait for enough browsers to implement [container-queries](https://www.w3.org/TR/css-contain-3/),\nand in any event when you simply want to do different things at different sizes (e.g. in the project I'm\nworking on right now, a row of buttons turns into a menu at narrow widths) there's `<size-break>`.\n\nNote that the sizes referred to are of the `<size-break>`'s `.offsetParent`, and it watches for\nthe window's `resize` events and its own (via `ResizeObserver`).\n\n    <size-break min-width=\"500\">\n      <default-thing>I am big!</default-thing>\n      <small-thing slot=\"small\">I am little</small-thing>\n    </size-break>\n\n`<size-break>` supports both `min-width` and/or `min-height`, and you can of course target only one\nof the slots if you like. The demo site uses them to hide the [bundlejs](https://bundlejs.com/) badge when\nspace is tight.\n\n### `<tab-selector>`\n\nA tab-selector with nice animations.\n\n## utilities\n\n### scriptTag & styleSheet\n\nIf you need to load an old schoole javascript library via cdn (both mapboxgl and bodymovin are\nfine examples) then use these two functions. They return promises that resolve when the\nmodule in question has loaded.\n\nUsage:\n\n    import { scriptTag } from 'xinjs-ui'\n\n    const bodymovinAvailable = scriptTag('../lottie.min.js')\n\n    bodymovinAvailable.then(() => {\n      globalThis.bodymovien.loadAnimation(...)\n    })\n\n`<bodymovin-player>` and is implemented in such a way that if you've preloaded the module\n(e.g. via a script tag or packaging) it won't load it again, which affords offline\nuse.\n\nThere's no point for mapbox since it won't work without connectivity anyway.\n\n### trackDrag\n\nSometimes you want to track a mouse-drag or touch-drag operation without messing around.\nThis is how the resizeable columns in `<data-table>` work.\n\nJust call `trackDrag(event, (dx, dy, event) => { ... })` and you'll get updates on corresponding events until\nyou return `true` from the event-handler (or, in the case of `touch` events, the last `touch` ends).\nFor mouse events, a \"tracker\" element is thrown up in front of everything for the event.\n\nFor `touch` events, `dx` and `dy` are based on `event.touches[0]`. If you want to handle\nmulti-touch or specific touches, handle `event.touches` etc. yourself.\n\n### makeSorter\n\nI'm always confusing myself when writing sort functions, so I wrote `makeSorter()`. It's\ninsanely simple and just works™. It makes writing an array sort callback for anything\nother than an array of numbers or strings easier.\n\nUsage:\n\n    interface Person {\n      nameFirst: string\n      nameLast: string\n    }\n\n    const people: Person[] = await getRecords(...)\n\n    // sort by nameLast, then nameFirst\n    const nameSorter = makeSorter(\n      (person: Person) => [person.nameLast, person.nameFirst]\n    )\n\n    people.sort(nameSorter)\n\n    interface Product {\n      name: string,\n      category: string,\n      sales: number\n    }\n\n    const productSales = await getRecords(...)\n\n    // sort by category (A-Z), then sales (highest to lowest)\n    const categorySalesSorter = makeSorter(\n      (product: Product) => [product.category, -product.sales]\n    )\n\n    productSales.sort(categorySalesSorter)\n\nBasically, you write a function that given some thing returns a prioritized list of\n`string`s or `number`s and `makeSorter` produces an callback function for `Array.sort()`\nthat will sort the array in _ascending_ order.\n\nIf you pass `false` as the (optional) second parameter you'll get a _descending_ sorter,\nbut for numbers just multiplying by -1 is just as easy (per the example).\n\nIf I ever conceive of a need for a version that lets you invert the sort order of\nindividual array elements I'll extend it to allowing the second parameter to also be\nan array…\n",
    "filename": "README.md",
    "path": "README.md"
  }
]
